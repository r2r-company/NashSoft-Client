import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import axios from "./../../../config/api";

import PageMeta from "../../../components/common/PageMeta";
import PageBreadcrumb from "../../../components/common/PageBreadCrumb";
import Button from "../../../components/ui/button/Button";
import Input from "../../../components/ui/input/Input";
import ConfirmModal from "../../../components/ui/modal/ConfirmModal";
import Alert from "../../../components/ui/alert/Alert";

type PriceType = {
  id: number;
  name: string;
  description: string;
};

export default function PriceTypeDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();

  const [priceType, setPriceType] = useState<PriceType | null>(null);
  const [form, setForm] = useState<Partial<PriceType>>({});
  const [changed, setChanged] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [loading, setLoading] = useState(true);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  useEffect(() => {
    const loadData = async () => {
      try {
        // API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É —Ü—ñ–Ω–∏ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É
        const response = await axios.get("price-types/");
        const priceTypes = response.data;
        const foundPriceType = priceTypes.find((pt: PriceType) => pt.id === parseInt(id || "0"));
        
        if (foundPriceType) {
          setPriceType(foundPriceType);
          setForm(foundPriceType);
        } else {
          toast.error("–¢–∏–ø —Ü—ñ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
          navigate("/price-types");
        }
        setLoading(false);
      } catch (error) {
        console.error("Error loading data:", error);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö");
        setLoading(false);
      }
    };

    if (id) {
      loadData();
    }
  }, [id, navigate]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm({
      ...form,
      [name]: value,
    });
    setChanged(true);
  };

  const handleSave = () => {
    // API –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    toast.error("API –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É —Ü—ñ–Ω–∏ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ‚ùå");
    
    // –ö–æ–ª–∏ API –±—É–¥–µ –≥–æ—Ç–æ–≤–µ, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏:
    /*
    const requestBody = {
      name: form.name,
      description: form.description,
    };

    axios
      .put(`price-types/${id}/`, requestBody)
      .then((res) => {
        const updatedPriceTypeData = res.data;
        
        setPriceType(updatedPriceTypeData);
        setForm(updatedPriceTypeData);
        setChanged(false);
        setIsEditing(false);
        setShowAlert(true);
        setTimeout(() => setShowAlert(false), 3000);
      })
      .catch((err) => {
        console.error("PUT error:", err.response?.data);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ ‚ùå");
      });
    */
  };

  const handleDelete = () => {
    // API –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    toast.error("API –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–ø—É —Ü—ñ–Ω–∏ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ‚ùå");
    
    // –ö–æ–ª–∏ API –±—É–¥–µ –≥–æ—Ç–æ–≤–µ, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏:
    /*
    axios
      .delete(`price-types/${id}/`)
      .then(() => {
        toast.success("–¢–∏–ø —Ü—ñ–Ω–∏ –≤–∏–¥–∞–ª–µ–Ω–æ üóëÔ∏è");
        navigate("/price-types");
      })
      .catch(() => {
        toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ ‚ùå");
      });
    */
  };

  if (loading || !priceType) return <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;

  return (
    <>
      <PageMeta title={`–¢–∏–ø —Ü—ñ–Ω–∏ ${priceType.name} | –ù–∞—à–°–æ—Ñ—Ç`} description="–î–µ—Ç–∞–ª—ñ —Ç–∏–ø—É —Ü—ñ–Ω–∏" />
      <PageBreadcrumb
        crumbs={[
          { label: "–¢–∏–ø–∏ —Ü—ñ–Ω", href: "/price-types" },
          { label: ` ${priceType.name}` },
        ]}
      />

      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-800 dark:text-white">
          –î–µ—Ç–∞–ª—ñ —Ç–∏–ø—É —Ü—ñ–Ω–∏
        </h1>
        <div className="flex gap-3">
          <Button variant="primary" size="sm" onClick={() => navigate("/price-types")}>
            –ù–∞–∑–∞–¥
          </Button>
          {!isEditing && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setIsEditing(true)}
            >
              –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
            </Button>
          )}
          {changed && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setShowSaveModal(true)}
            >
              –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
            </Button>
          )}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => setShowDeleteModal(true)}
          >
            –í–∏–¥–∞–ª–∏—Ç–∏
          </Button>
        </div>
      </div>

      <div className="w-full rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
        <div className="grid gap-6 sm:max-w-md">
          <Input
            label="–ù–∞–∑–≤–∞ —Ç–∏–ø—É —Ü—ñ–Ω–∏"
            name="name"
            value={form.name || ""}
            onChange={handleChange}
            disabled={!isEditing}
          />

          <Input
            label="–û–ø–∏—Å"
            name="description"
            value={form.description || ""}
            onChange={handleChange}
            disabled={!isEditing}
          />
        </div>
      </div>

      <ConfirmModal
        isOpen={showDeleteModal}
        title="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–ø —Ü—ñ–Ω–∏?"
        description="–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏."
        onConfirm={handleDelete}
        onClose={() => setShowDeleteModal(false)}
      />

      <ConfirmModal
        isOpen={showSaveModal}
        title="–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏?"
        description="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ü—ñ –∑–º—ñ–Ω–∏?"
        onConfirm={() => {
          setShowSaveModal(false);
          handleSave();
        }}
        onClose={() => setShowSaveModal(false)}
      />

      {false && (
        <div className="fixed bottom-6 left-1/2 z-50 w-[90%] max-w-md -translate-x-1/2">
          <Alert
            variant="success"
            title="–£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
            message="–¢–∏–ø —Ü—ñ–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫"
          />
        </div>
      )}
    </>
  );
}
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../../config/api";
import toast from "react-hot-toast";
import PageMeta from "../../../components/common/PageMeta";
import PageBreadcrumb from "../../../components/common/PageBreadCrumb";
import Button from "../../../components/ui/button/Button";
import Input from "../../../components/ui/input/Input";
import Select from "../../../components/form/Select";
import ConfirmModal from "../../../components/ui/modal/ConfirmModal";
import ProductSelectionModal from "../Products/ProductSelectionModal";
import ReceiptSelectionModal from "../../../components/modals/ReceiptSelectionModal";


import {
  Table,
  TableBody,
  TableCell,
  TableHeader,
} from "../../../components/ui/table";


type ReturnToSupplierForm = {
  doc_type: string;
  company: number;
  firm: number;
  warehouse: number | undefined;
  supplier: number | undefined;  
  trade_point: number | undefined;
  contract: number | undefined;
  source_document: number | undefined; 
  auto_payment: boolean;
  items: ReturnToSupplierItem[];
};

type Company = {
  id: number;
  name: string;
  tax_id?: string;
};

type Firm = {
  id: number;
  name: string;
  company_name: string;
  company_id: number;
  is_vat: boolean; 
  vat_type: string;
};

type Supplier = {
  id: number;
  name: string;
  company?: string;
  contact_person?: string;
  phone?: string;
  email?: string;
};

// ‚úÖ –ü–û–í–ï–†–ù–ï–ù–ù–Ø –¢–û–í–ê–†–£ (—Å—Ö–æ–∂–∏–π –Ω–∞ SaleItem)
type ReturnToSupplierItem = {
  product: number | undefined;
  product_name?: string;
  product_base_unit?: number;
  product_base_unit_name?: string;
  
  // ‚úÖ –§–ê–°–£–í–ê–ù–ù–Ø:
  unit_conversion: number | null;
  unit_conversion_name?: string;
  final_unit?: number;
  final_unit_name?: string;
  
  quantity: number;
  price: number;
  vat_percent: number;
  total: number;
};

type SelectedProductWithUnit = {
  product: Product;
  unit_conversion_id: number | null;
  unit_name: string;
  unit_symbol: string;
  factor: number;
};


type Warehouse = {
  id: number;
  name: string;
};

type TradePoint = {
  id: number;
  name: string;
  firm_id: number;
  firm_name: string;
};

type Contract = {
  id: number;
  name: string;
  customer: number;
  customer_name: string;
  payment_type: number;
  payment_type_name: string;
  account: number;
  account_name: string;
  contract_type: string;
  doc_file: string | null;
  is_active: boolean;
  status: string;
  created_at?: string;
  updated_at?: string;
};

type Product = {
  id: number;
  name: string;
  unit?: number;
  unit_name?: string;
  group_id?: number;
  group_name?: string;
  price?: number;
  code?: string;
  description?: string;
  stock_quantity?: number;
  is_active?: boolean;
  category?: string;
  category_id?: number;
  product_group?: number;
  product_group_name?: string;
};

type PurchaseDocument = {
  id: number;
  doc: string;
  doc_number?: string;
  supplier_name?: string;
  date?: string;
};


export default function CreateReturnToSupplierPage() {
  const navigate = useNavigate();
  const [companies, setCompanies] = useState<Company[]>([]);
  const [firms, setFirms] = useState<Firm[]>([]);
  
  // ‚úÖ –ü–û–ß–ê–¢–ö–û–í–ò–ô –°–¢–ê–ù –î–õ–Ø –ü–û–í–ï–†–ù–ï–ù–ù–Ø

const [form, setForm] = useState<ReturnToSupplierForm>({
  doc_type: "return_to_supplier", // ‚úÖ –ó–ú–Ü–ù–ò–¢–ò –¢–ò–ü
  company: 0,
  firm: 0,
  warehouse: undefined,
  supplier: undefined, // ‚úÖ supplier –∑–∞–º—ñ—Å—Ç—å customer
  trade_point: undefined,
  contract: undefined,
  source_document: undefined,
  auto_payment: false,
  items: [
    {
      product: undefined,
      product_base_unit: undefined,
      product_base_unit_name: "",
      unit_conversion: null,
      unit_conversion_name: "",
      final_unit: undefined,
      final_unit_name: "",
      quantity: 1,
      price: 0,
      vat_percent: 0,
      total: 0
    }
  ]
});


  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);
  const [tradePoints, setTradePoints] = useState<TradePoint[]>([]);
  const [contracts, setContracts] = useState<Contract[]>([]);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [showProductModal, setShowProductModal] = useState(false);
  const [currentItemIndex, setCurrentItemIndex] = useState<number>(-1);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [loadingContracts, setLoadingContracts] = useState(false);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]); // –∑–∞–º—ñ—Å—Ç—å customers
  const [purchaseDocuments, setPurchaseDocuments] = useState<PurchaseDocument[]>([]); // –∑–∞–º—ñ—Å—Ç—å salesDocuments
  const [receipts, setReceipts] = useState<any[]>([]);
  const [selectedReceipt, setSelectedReceipt] = useState<number | null>(null);
  const [items, setItems] = useState<any[]>([]);
  const [showReceiptModal, setShowReceiptModal] = useState(false);

  useEffect(() => {
    loadDictionaries();
  }, []);

  useEffect(() => {
  if (form.company && form.firm && form.warehouse) {
    fetchReceipts();
  }
}, [form.company, form.firm, form.warehouse]);

  const handleReceiptSelect = (receipt: any) => {
  console.log("üìã –û–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è:", receipt);
  console.log("üìã ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:", receipt.id);
  
  setSelectedReceipt(receipt.id);
  setForm(prev => ({ 
    ...prev, 
    source_document: receipt.id,
    supplier: receipt.supplier_id,
    items: [] // –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –Ω–æ–≤–∏—Ö
  }));
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∏ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
  if (receipt.supplier_id && form.firm) {
    loadContractsBySupplier(receipt.supplier_id);
  }
  
  toast.success(`–û–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç: ${receipt.doc_number}`);
};



  // ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –ø–æ —Ñ—ñ–ª—å—Ç—Ä—É
  const fetchReceipts = async () => {
  if (!form.company || !form.firm || !form.warehouse) {
    console.log("–ù–µ –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏–±—Ä–∞–Ω—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω—å");
    return;
  }

  try {
    console.log("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω—å –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", {
      company: form.company,
      firm: form.firm,
      warehouse: form.warehouse
    });

    const response = await axios.get("/receipts-by-filter/", {
      params: {
        company: form.company,
        firm: form.firm,
        warehouse: form.warehouse,
      },
    });

    console.log("‚úÖ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", response.data);
    
    if (response.data.success && response.data.data) {
      setReceipts(response.data.data);
      
      if (response.data.data.length === 0) {
        toast.error("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Å–∫–ª–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ");
      }
    } else {
      setReceipts([]);
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è");
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ—Å—Ç—É–ø–ª–µ–Ω—å:", error);
    setReceipts([]);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω—å");
  }
};


  // ‚úÖ –ü—ñ–¥—Ç—è–≥—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è
  useEffect(() => {
  const fetchReceiptItems = async () => {
    if (!selectedReceipt) {
      console.log("–î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –Ω–µ –æ–±—Ä–∞–Ω–æ");
      return;
    }

    try {
      console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è ID: ${selectedReceipt}`);
      
      // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const response = await axios.get(`/document/${selectedReceipt}`);
      
      console.log("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å API:", response.data);
      
      const receiptData = response.data;
      const fetchedItems = receiptData.items || [];

      console.log("üì¶ –¢–æ–≤–∞—Ä–∏ –∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è:", fetchedItems);

      if (!fetchedItems || fetchedItems.length === 0) {
        toast.error("–í —Ü—å–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤");
        return;
      }

      // ‚úÖ –ú–ê–ü–£–í–ê–ù–ù–Ø —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
      const mappedItems: ReturnToSupplierItem[] = fetchedItems.map((item: any, index: number) => {
        console.log(`üìù –ú–∞–ø—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ${index + 1}:`, item);
        
        return {
          product: item.product,
          product_name: `–¢–æ–≤–∞—Ä ID: ${item.product}`, // –ü–æ–∫–∏ —â–æ —Ç–∞–∫, –ø—ñ–∑–Ω—ñ—à–µ –¥–æ–¥–∞–º–æ –Ω–∞–∑–≤–∏
          product_base_unit: item.unit,
          product_base_unit_name: "", // –¢—Ä–µ–±–∞ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –æ–¥–∏–Ω–∏—Ü—ñ
          unit_conversion: item.unit_conversion,
          unit_conversion_name: "",
          final_unit: item.unit,
          final_unit_name: "",
          quantity: parseFloat(item.quantity) || 1,
          price: parseFloat(item.price) || 0,
          vat_percent: parseFloat(item.vat_percent) || 0,
          total: (parseFloat(item.price) || 0) * (parseFloat(item.quantity) || 1),
        };
      });

      console.log("‚úÖ –ó–º–∞–ø–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:", mappedItems);

      setForm(prev => ({ 
        ...prev, 
        items: mappedItems,
        source_document: selectedReceipt
      }));

      toast.success(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${mappedItems.length} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è`);

    } catch (error: any) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:", error);
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è");
    }
  };

  fetchReceiptItems();
}, [selectedReceipt]);

const checkPurchaseDocuments = async () => {
  try {
    const response = await axios.get("documents/?type=purchase"); // ‚úÖ purchase –∑–∞–º—ñ—Å—Ç—å sale
    console.log("üìã Available purchase documents:", response.data);
    
    let purchaseDocs = [];
    if (response.data && response.data.data) {
      purchaseDocs = response.data.data;
    } else if (Array.isArray(response.data)) {
      purchaseDocs = response.data;
    }
    
    setPurchaseDocuments(purchaseDocs); // ‚úÖ –ó–ú–Ü–ù–ï–ù–û
    
    if (purchaseDocs.length > 0) {
      console.log("‚úÖ Found purchase documents:", purchaseDocs);
      console.log("‚úÖ Use one of these IDs for source_document:", purchaseDocs.map((doc: { id: any; }) => doc.id));
    } else {
      console.log("‚ùå No purchase documents found. Create a purchase document first!");
    }
  } catch (error) {
    console.error("Error loading purchase documents:", error);
  }
};


  const loadDictionaries = async () => {
  try {
    console.log("Loading dictionaries for returns to supplier...");

    const requests = [
      axios.get("companies/"),
      axios.get("firms/"),
      axios.get("suppliers/"), // ‚úÖ suppliers –∑–∞–º—ñ—Å—Ç—å customers
      axios.get("warehouses/"),
      axios.get("trade-points/")
    ];

    const results = await Promise.allSettled(requests);
    
    // ‚úÖ –ö–û–ú–ü–ê–ù–Ü–á
    if (results[0].status === 'fulfilled') {
      console.log("‚úÖ Companies loaded:", results[0].value.data);
      setCompanies(results[0].value.data);
    } else {
      console.error("‚ùå Error loading companies:", results[0].reason);
      setCompanies([]);
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—ó");
    }

    // ‚úÖ –§–Ü–†–ú–ò
    if (results[1].status === 'fulfilled') {
      console.log("‚úÖ Firms loaded:", results[1].value.data);
      setFirms(results[1].value.data);
    } else {
      console.error("‚ùå Error loading firms:", results[1].reason);
      setFirms([]);
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ—ñ—Ä–º–∏");
    }

    // ‚úÖ –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–ò
    if (results[2].status === 'fulfilled') {
      setSuppliers(results[2].value.data); // ‚úÖ –ó–ú–Ü–ù–ï–ù–û
    }

    // ‚úÖ –°–ö–õ–ê–î–ò
    if (results[3].status === 'fulfilled') {
      setWarehouses(results[3].value.data);
    }

    // ‚úÖ –¢–û–†–ì–û–í–Ü –¢–û–ß–ö–ò
    if (results[4].status === 'fulfilled') {
      setTradePoints(results[4].value.data);
    }

    setLoading(false);
  } catch (error) {
    console.error("Error loading dictionaries:", error);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤");
    setLoading(false);
  }
};


  const loadContractsBySupplier = async (supplierId: number) => {
  setLoadingContracts(true);
  setContracts([]);
  
  try {
    console.log(`Loading contracts for supplier ${supplierId} and firm ${form.firm}...`);
    
    const response = await axios.get(`contracts/by-supplier/?id=${supplierId}`); // ‚úÖ –ó–ú–Ü–ù–ï–ù–û –µ–Ω–¥–ø–æ—ñ–Ω—Ç
    console.log("‚úÖ All contracts loaded:", response.data);
    
    let filteredContracts = response.data;
    
    if (form.firm && response.data.length > 0 && 'firm_id' in response.data[0]) {
      filteredContracts = response.data.filter((contract: any) => 
        contract.firm_id === form.firm
      );
      console.log(`‚úÖ Filtered contracts for firm ${form.firm}:`, filteredContracts);
    }
    
    setContracts(filteredContracts);
    
    if (filteredContracts.length === 0) {
      toast.error("–î–æ–≥–æ–≤–æ—Ä–∏ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ —ñ —Ñ—ñ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"); // ‚úÖ –ó–ú–Ü–ù–ï–ù–û —Ç–µ–∫—Å—Ç
    }
    
  } catch (error) {
    console.error("‚ùå Error loading contracts:", error);
    setContracts([]);
    toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∏");
  } finally {
    setLoadingContracts(false);
  }
};

  const handleCompanyChange = (value: string) => {
  const companyId = parseInt(value);
  setForm({ 
    ...form, 
    company: companyId,
    firm: 0,
    warehouse: undefined,
    supplier: undefined, // ‚úÖ –ó–ú–Ü–ù–ï–ù–û supplier –∑–∞–º—ñ—Å—Ç—å customer
    trade_point: undefined,
    contract: undefined,
    items: []
  });
  
  if (companyId) {
    loadWarehousesByCompany(companyId);
  } else {
    setWarehouses([]);
  }
  setContracts([]);
};

  const loadWarehousesByCompany = async (companyId: number) => {
    try {
      const response = await axios.get("warehouses/");
      const filteredWarehouses = response.data.filter((w: any) => 
        w.company_id === companyId
      );
      setWarehouses(filteredWarehouses);
    } catch (error) {
      setWarehouses([]);
    }
  };

  const handleFirmChange = (value: string) => {
  const firmId = parseInt(value);
  setForm({ 
    ...form, 
    firm: firmId,
    warehouse: undefined,
    trade_point: undefined,
    supplier: undefined, // ‚úÖ –ó–ú–Ü–ù–ï–ù–û supplier –∑–∞–º—ñ—Å—Ç—å customer
    contract: undefined,
    items: []
  });
  
  if (firmId) {
    loadTradePointsByFirm(firmId);
    loadWarehousesByFirm(firmId);
  } else {
    setTradePoints([]);
    setWarehouses([]);
  }
};


  const getFilteredFirms = () => {
    return firms.filter(firm => firm.company_id === form.company);
  };

  const loadTradePointsByFirm = async (firmId: number) => {
    try {
      const response = await axios.get("trade-points/");
      console.log("‚úÖ All trade points:", response.data);
      
      const filteredTradePoints = response.data.filter((tp: any) => 
        tp.firm === firmId || tp.firm_id === firmId
      );
      
      console.log("‚úÖ Filtered trade points:", filteredTradePoints);
      setTradePoints(filteredTradePoints);
    } catch (error) {
      console.error("‚ùå Error loading trade points:", error);
      setTradePoints([]);
    }
  };

  const loadWarehousesByFirm = async (firmId: number) => {
    try {
      const response = await axios.get("warehouses/");
      console.log("‚úÖ All warehouses:", response.data);
      
      const filteredWarehouses = response.data.filter((w: any) => 
        w.company_id === form.company
      );
      
      console.log("‚úÖ Filtered warehouses:", filteredWarehouses);
      setWarehouses(filteredWarehouses);
      
      if (filteredWarehouses.length === 0) {
        toast.error("–°–∫–ª–∞–¥–∏ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ");
      }
    } catch (error) {
      console.error("‚ùå Error loading warehouses:", error);
      setWarehouses([]);
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∫–ª–∞–¥–∏");
    }
  };

  const handleSupplierChange = (value: string) => {
  const supplierId = parseInt(value);
  setForm({ 
    ...form, 
    supplier: supplierId, // ‚úÖ –ó–ú–Ü–ù–ï–ù–û
    contract: undefined
  });
  
  if (supplierId && form.firm) {
    loadContractsBySupplier(supplierId); // ‚úÖ –ó–ú–Ü–ù–ï–ù–û –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó
  } else {
    setContracts([]);
  }
};

  const handleWarehouseChange = (value: string) => {
  const warehouseId = parseInt(value);
  setForm({ ...form, warehouse: warehouseId });
  
  if (warehouseId && form.company && form.firm) {
    fetchReceipts();
  }
};

  const handleTradePointChange = (value: string) => {
    setForm({ ...form, trade_point: parseInt(value) });
  };

  const handleContractChange = (value: string) => {
    setForm({ ...form, contract: parseInt(value) });
  };

  const handleAutoPaymentChange = (checked: boolean) => {
    setForm({ ...form, auto_payment: checked });
  };

  const handleItemChange = (index: number, field: keyof ReturnToSupplierItem, value: string) => {
  // ‚úÖ –ó–ú–Ü–ù–ï–ù–û —Ç–∏–ø –∑ ReturnItem –Ω–∞ ReturnToSupplierItem
  const items = [...form.items];
  
  if (field === 'product') {
    const productId = parseInt(value) || undefined;
    items[index] = { 
      ...items[index], 
      [field]: productId
    };
    
    if (productId) {
      items[index].product_name = `–¢–æ–≤–∞—Ä ID: ${productId}`;
    }
  } else {
    const numericValue = parseFloat(value) || 0;
    items[index] = { 
      ...items[index], 
      [field]: numericValue 
    };
    
    if (field === 'quantity' || field === 'price') {
      const quantity = field === 'quantity' ? numericValue : items[index].quantity;
      const price = field === 'price' ? numericValue : items[index].price;
      items[index].total = quantity * price;
    }
  }
  
  setForm({ ...form, items });
};

  const handleMultipleProductsSelect = (selectedItems: SelectedProductWithUnit[]) => {
    const newItems = selectedItems.map(selectedItem => ({
      product: selectedItem.product.id,
      product_name: selectedItem.product.name,
      product_base_unit: selectedItem.product.unit,
      product_base_unit_name: selectedItem.product.unit_name,
      
      // ‚úÖ –§–ê–°–£–í–ê–ù–ù–Ø:
      unit_conversion: selectedItem.unit_conversion_id,
      unit_conversion_name: selectedItem.unit_conversion_id ? selectedItem.unit_name : "",
      final_unit: selectedItem.product.unit,
      final_unit_name: selectedItem.unit_name,
      
      quantity: 1,
      price: selectedItem.product.price || 0,
      vat_percent: 0,
      total: 1 * (selectedItem.product.price || 0)
    }));

    setForm({ 
      ...form, 
      items: [...form.items.filter(item => item.product), ...newItems]
    });
    setShowProductModal(false);
    setCurrentItemIndex(-1);
  };

  const handleProductSelect = (selectedItem: SelectedProductWithUnit) => {
    if (currentItemIndex >= 0) {
      const items = [...form.items];
      items[currentItemIndex] = {
        ...items[currentItemIndex],
        product: selectedItem.product.id,
        product_name: selectedItem.product.name,
        product_base_unit: selectedItem.product.unit,
        product_base_unit_name: selectedItem.product.unit_name,
        
        // ‚úÖ –§–ê–°–£–í–ê–ù–ù–Ø:
        unit_conversion: selectedItem.unit_conversion_id,
        unit_conversion_name: selectedItem.unit_conversion_id ? selectedItem.unit_name : "",
        final_unit: selectedItem.product.unit,
        final_unit_name: selectedItem.unit_name,
        
        price: selectedItem.product.price || items[currentItemIndex].price,
        total: items[currentItemIndex].quantity * (selectedItem.product.price || items[currentItemIndex].price)
      };
      setForm({ ...form, items });
    }
    setShowProductModal(false);
    setCurrentItemIndex(-1);
  };

  const openProductModal = (itemIndex: number) => {
    setCurrentItemIndex(itemIndex);
    setShowProductModal(true);
  };

  const openMultiProductModal = () => {
    setCurrentItemIndex(-1);
    setShowProductModal(true);
  };

  const addItem = () => {
  const newItem: ReturnToSupplierItem = { // ‚úÖ –ó–ú–Ü–ù–ï–ù–û —Ç–∏–ø
    product: undefined,
    product_base_unit: undefined,
    product_base_unit_name: "",
    unit_conversion: null,
    unit_conversion_name: "",
    final_unit: undefined,
    final_unit_name: "",
    quantity: 1,
    price: 0,
    vat_percent: 0,
    total: 0
  };
  setForm({ 
    ...form, 
    items: [...form.items, newItem] 
  });
};

  const removeItem = (index: number) => {
    if (form.items.length <= 1) {
      toast.error("–ú–∞—î –±—É—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä");
      return;
    }
    const items = [...form.items];
    items.splice(index, 1);
    setForm({ ...form, items });
  };

const validateForm = (): boolean => {
  if (!form.company || !form.firm) {
    toast.error("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é —Ç–∞ —Ñ—ñ—Ä–º—É ‚ùó");
    return false;
  }

  if (!form.supplier || !form.warehouse || !form.trade_point) {
    toast.error("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è ‚ùó");
    return false;
  }

  // ‚úÖ –ù–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å purchase documents
  if (!form.source_document) {
    toast.error("–û–±–µ—Ä—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚ùó");
    return false;
  }

  const selectedSupplier = suppliers.find(s => s.id === form.supplier);
  if (!selectedSupplier) {
    toast.error("–û–±—Ä–∞–Ω–∏–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ ‚ùó");
    return false;
  }

  const selectedWarehouse = warehouses.find(w => w.id === form.warehouse);
  if (!selectedWarehouse) {
    toast.error("–û–±—Ä–∞–Ω–∏–π —Å–∫–ª–∞–¥ –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ ‚ùó");
    return false;
  }

  const selectedTradePoint = tradePoints.find(tp => tp.id === form.trade_point);
  if (!selectedTradePoint) {
    toast.error("–û–±—Ä–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞ —Ç–æ—á–∫–∞ –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ ‚ùó");
    return false;
  }

  const hasEmptyItems = form.items.some(item => !item.product);
  if (hasEmptyItems) {
    toast.error("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π ‚ùó");
    return false;
  }

  const hasInvalidQuantities = form.items.some(item => item.quantity <= 0);
  if (hasInvalidQuantities) {
    toast.error("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è ‚ùó");
    return false;
  }

  const hasInvalidPrices = form.items.some(item => item.price < 0);
  if (hasInvalidPrices) {
    toast.error("–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é ‚ùó");
    return false;
  }

  return true;
};

  const handleSave = async () => {
  if (!validateForm()) {
    return;
  }

  setSaving(true);

  const requestBody = {
    doc_type: form.doc_type,
    company: form.company,
    firm: form.firm,
    warehouse: form.warehouse,
    supplier: form.supplier,
    trade_point: form.trade_point,
    contract: form.contract,
    source_document: form.source_document, // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    auto_payment: form.auto_payment,
    items: form.items.map(item => ({
      product: item.product,
      quantity: item.quantity,
      price: item.price,
      vat_percent: item.vat_percent,
      unit_conversion: item.unit_conversion
    }))
  };

  console.log("üîÑ Sending return_to_supplier request:", JSON.stringify(requestBody, null, 2));

  try {
    const response = await axios.post("document/", requestBody);
    console.log("‚úÖ Return to supplier document created successfully:", response.data);
    
    toast.success("–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ");
    
    setTimeout(() => {
      navigate("/returns-to-supplier");
    }, 500);
    
  } catch (error: any) {
    console.error("‚ùå API Error:", error);
    
    if (error.response) {
      console.error("‚ùå Response data:", JSON.stringify(error.response.data, null, 2));
      
      if (error.response.data) {
        const errorData = error.response.data;
        
        if (typeof errorData === 'string') {
          toast.error(`API –ø–æ–º–∏–ª–∫–∞: ${errorData}`);
        } else if (errorData.message) {
          toast.error(`API –ø–æ–º–∏–ª–∫–∞: ${errorData.message}`);
        } else if (errorData.error) {
          toast.error(`API –ø–æ–º–∏–ª–∫–∞: ${errorData.error}`);
        } else if (errorData.detail) {
          toast.error(`API –ø–æ–º–∏–ª–∫–∞: ${errorData.detail}`);
        } else {
          const errorMessages = Object.entries(errorData)
            .map(([field, message]) => `${field}: ${message}`)
            .join(', ');
          toast.error(`API –ø–æ–º–∏–ª–∫–∞: ${errorMessages}`);
        }
      } else {
        toast.error(`HTTP ${error.response.status}: ${error.response.statusText}`);
      }
    } else {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É");
    }
  } finally {
    setSaving(false);
  }
};

  const getTotalAmount = () => {
    return form.items.reduce((sum, item) => sum + (item.total || 0), 0);
  };

  const getTotalVAT = () => {
    return form.items.reduce((sum, item) => sum + (item.total * item.vat_percent / 100), 0);
  };

  const formatPrice = (price: number) => {
    return `${price.toFixed(2)} ‚Ç¥`;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <PageMeta 
  title="–ù–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É | –ù–∞—à–°–æ—Ñ—Ç" 
  description="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É" 
/>
<PageBreadcrumb
  crumbs={[
    { label: "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É", href: "/returns-to-supplier" },
    { label: "–ù–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç" },
  ]}
/>

<div className="mb-6 flex items-center justify-between">
  <div>
    <h1 className="text-2xl font-semibold text-gray-800 dark:text-white">
      ‚Ü©Ô∏è –ù–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É
    </h1>
    <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
      –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É
    </p>
  </div>
  <div className="flex gap-3">
    <Button variant="outline" size="sm" onClick={() => navigate("/returns-to-supplier")}>
      –°–∫–∞—Å—É–≤–∞—Ç–∏
    </Button>
    <Button variant="primary" size="sm" onClick={() => setShowSaveModal(true)} disabled={saving}>
      {saving ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç"}
    </Button>
  </div>
</div>

<div className="grid gap-6">
  {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
  <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
    <h2 className="mb-4 text-lg font-semibold text-gray-800 dark:text-white">
      –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    </h2>
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {/* ‚úÖ –ö–û–ú–ü–ê–ù–Ü–Ø */}
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –ö–æ–º–ø–∞–Ω—ñ—è *
        </label>
        <Select
          options={companies.map(company => ({
            value: company.id.toString(),
            label: company.name
          }))}
          placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é"
          onChange={handleCompanyChange}
          defaultValue=""
        />
      </div>

      {/* ‚úÖ –§–Ü–†–ú–ê */}
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –§—ñ—Ä–º–∞ *
        </label>
        <Select
          options={getFilteredFirms().map(firm => ({
            value: firm.id.toString(),
            label: `${firm.name} (${firm.is_vat ? '–∑ –ü–î–í' : '–±–µ–∑ –ü–î–í'})`
          }))}
          placeholder="–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ—Ä–º—É"
          onChange={handleFirmChange}
          defaultValue=""
        />
      </div>

      {/* ‚úÖ –°–ö–õ–ê–î - –ü–ï–†–ï–ú–Ü–°–¢–ò–¢–ò –ü–ï–†–ï–î –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–û–ú */}
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –°–∫–ª–∞–¥ *
        </label>
        {!form.firm ? (
          <div className="p-3 border border-gray-300 bg-gray-50 rounded-lg text-gray-500">
            –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ—Ä–º—É
          </div>
        ) : warehouses.length === 0 ? (
          <div className="p-3 border border-red-300 bg-red-50 rounded-lg text-red-700">
            ‚ö†Ô∏è –°–∫–ª–∞–¥–∏ –¥–ª—è —Ü—ñ—î—ó —Ñ—ñ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
          </div>
        ) : (
          <Select
            options={warehouses.map(warehouse => ({
              value: warehouse.id.toString(),
              label: warehouse.name
            }))}
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥"
            onChange={handleWarehouseChange}
            defaultValue=""
          />
        )}
      </div>

      {/* ‚úÖ –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö */}
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ *
        </label>
        {!form.firm ? (
          <div className="p-3 border border-gray-300 bg-gray-50 rounded-lg text-gray-500">
            –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ—Ä–º—É
          </div>
        ) : suppliers.length === 0 ? (
          <div className="p-3 border border-red-300 bg-red-50 rounded-lg text-red-700">
            ‚ö†Ô∏è –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
          </div>
        ) : (
          <Select
            options={suppliers.map(supplier => ({
              value: supplier.id.toString(),
              label: supplier.name
            }))}
            placeholder="–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"
            onChange={handleSupplierChange}
            defaultValue=""
          />
        )}
      </div>

      {/* ‚úÖ –¢–û–†–ì–û–í–ê –¢–û–ß–ö–ê */}
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –¢–æ—Ä–≥–æ–≤–∞ —Ç–æ—á–∫–∞ *
        </label>
        {!form.firm ? (
          <div className="p-3 border border-gray-300 bg-gray-50 rounded-lg text-gray-500">
            –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ—Ä–º—É
          </div>
        ) : tradePoints.length === 0 ? (
          <div className="p-3 border border-red-300 bg-red-50 rounded-lg text-red-700">
            ‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ –¥–ª—è —Ü—ñ—î—ó —Ñ—ñ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
          </div>
        ) : (
          <Select
            options={tradePoints.map(tp => ({
              value: tp.id.toString(),
              label: tp.name
            }))}
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—É —Ç–æ—á–∫—É"
            onChange={handleTradePointChange}
            defaultValue=""
          />
        )}
      </div>

      {/* ‚úÖ –î–û–ì–û–í–Ü–† */}
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –ö–æ–Ω—Ç—Ä–∞–∫—Ç
        </label>
        {!form.supplier ? (
          <div className="p-3 border border-gray-300 bg-gray-50 rounded-lg text-gray-500">
            –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
          </div>
        ) : loadingContracts ? (
          <div className="p-3 border border-blue-300 bg-blue-50 rounded-lg text-blue-700 flex items-center gap-2">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
            –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—ñ–≤...
          </div>
        ) : contracts.length === 0 ? (
          <div className="p-3 border border-red-300 bg-red-50 rounded-lg text-red-700">
            ‚ö†Ô∏è –î–æ–≥–æ–≤–æ—Ä–∏ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
          </div>
        ) : (
          <Select
            options={contracts.map(contract => ({
              value: contract.id.toString(),
              label: `${contract.name} (${contract.contract_type}) - ${contract.status}`
            }))}
            placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç"
            onChange={handleContractChange}
            defaultValue=""
          />
        )}
      </div>
    </div>
    
    {/* ‚úÖ –î–û–ö–£–ú–ï–ù–¢ –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø - –ù–û–í–ò–ô –ë–õ–û–ö –ó –ö–ù–û–ü–ö–û–Æ */}
<div className="mt-6">
  <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
    üìã –î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  </label>
  
  {!form.warehouse ? (
    <div className="p-3 border border-gray-300 bg-gray-50 rounded-lg text-gray-500">
      –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥
    </div>
  ) : (
    <div className="space-y-3">
      {/* –ö–ù–û–ü–ö–ê –í–ò–ë–û–†–£ –î–û–ö–£–ú–ï–ù–¢–ê */}
      <Button 
        variant="outline" 
        onClick={() => setShowReceiptModal(true)}
        className="w-full justify-start"
      >
        üìã –û–±—Ä–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è
      </Button>
      
      {/* –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –í–ò–ë–†–ê–ù–ò–ô –î–û–ö–£–ú–ï–ù–¢ */}
      {selectedReceipt && (
        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
          {(() => {
            const selectedReceiptData = receipts.find(r => r.id === selectedReceipt);
            return selectedReceiptData ? (
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="font-medium text-blue-800">
                    ‚úÖ –û–±—Ä–∞–Ω–æ: {selectedReceiptData.doc_number}
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => {
                      setSelectedReceipt(null);
                      setForm(prev => ({ ...prev, source_document: undefined, items: [] }));
                    }}
                  >
                    ‚úï –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </Button>
                </div>
                <div className="grid grid-cols-2 gap-4 text-sm text-blue-600">
                  <div>üìÖ {new Date(selectedReceiptData.date).toLocaleDateString('uk-UA')}</div>
                  <div>üè¢ {selectedReceiptData.supplier_name}</div>
                  <div>üìä {selectedReceiptData.status === 'posted' ? '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ' : selectedReceiptData.status}</div>
                  <div>üì¶ {selectedReceiptData.warehouse_name}</div>
                </div>
              </div>
            ) : null;
          })()}
        </div>
      )}
    </div>
  )}
</div>
    
    {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–ø–ª–∞—Ç–∞ */}
    <div className="mt-4 flex items-center gap-2">
      <input
        type="checkbox"
        id="auto_payment"
        checked={form.auto_payment}
        onChange={(e) => handleAutoPaymentChange(e.target.checked)}
        className="rounded border-gray-300"
      />
      <label htmlFor="auto_payment" className="text-sm text-gray-700 dark:text-white">
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –≤—ñ–¥ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
      </label>
    </div>
  </div>

  {/* –¢–æ–≤–∞—Ä–∏ */}
  <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
    <div className="mb-4 flex items-center justify-between">
      <h2 className="text-lg font-semibold text-gray-800 dark:text-white">
        –ü–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è ({form.items.length})
      </h2>
      <div className="flex gap-2">
        {/* ‚úÖ –ü–û–ö–ê–ó–£–í–ê–¢–ò –ö–ù–û–ü–ö–ò –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –û–ë–†–ê–ù–û –î–û–ö–£–ú–ï–ù–¢ –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø */}
        {selectedReceipt ? (
          <div className="text-sm text-green-600 bg-green-50 px-3 py-1 rounded-lg border border-green-200">
            ‚úÖ –¢–æ–≤–∞—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è
          </div>
        ) : (
          <>
            <Button variant="outline" size="sm" onClick={openMultiProductModal}>
              –î–æ–¥–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤
            </Button>
            <Button variant="outline" size="sm" onClick={addItem}>
              –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä
            </Button>
          </>
        )}
      </div>
    </div>

    {/* ‚úÖ –ü–û–ö–ê–ó–£–í–ê–¢–ò –¢–û–í–ê–†–ò –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –í–û–ù–ò –Ñ */}
    {form.items.length === 0 ? (
      <div className="p-8 text-center border-2 border-dashed border-gray-300 rounded-lg">
        <div className="text-gray-500 mb-2">
          üì¶ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        </div>
        <div className="text-sm text-gray-400">
          {!selectedReceipt 
            ? "–û–±–µ—Ä—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏" 
            : "–¢–æ–≤–∞—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è..."
          }
        </div>
      </div>
    ) : (
      <>
        <div className="overflow-hidden rounded-lg border border-gray-200 dark:border-white/10">
          <Table>
            <TableHeader>
              <tr className="border-b border-gray-200 dark:border-white/10 bg-gray-50 dark:bg-white/5">
                <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                  –¢–æ–≤–∞—Ä *
                </TableCell>
                <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                  –û–¥–∏–Ω–∏—Ü—è
                </TableCell>
                <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                  –ö—ñ–ª—å–∫—ñ—Å—Ç—å
                </TableCell>
                <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                  –¶—ñ–Ω–∞
                </TableCell>
                <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                  –ü–î–í (%)
                </TableCell>
                <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                  –°—É–º–∞
                </TableCell>
                <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                  –î—ñ—ó
                </TableCell>
              </tr>
            </TableHeader>

            <TableBody>
              {form.items.map((item, index) => (
                <tr key={index} className="border-b border-gray-100 dark:border-white/10">
                  {/* ‚úÖ –¢–û–í–ê–† */}
                  <TableCell className="px-4 py-3">
                    <div className="flex items-center gap-2">
                      <div className="flex-1">
                        {item.product_name ? (
                          <div className="p-2 bg-red-50 dark:bg-red-900/20 rounded border border-red-200 dark:border-red-800">
                            <div className="font-medium text-sm text-red-800 dark:text-red-300">{item.product_name}</div>
                            <div className="text-xs text-red-600 dark:text-red-400">
                              ID: {item.product} ‚Ä¢ ‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É
                            </div>
                          </div>
                        ) : (
                          <div className="p-2 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded text-center text-gray-500">
                            –¢–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–Ω–æ
                          </div>
                        )}
                      </div>
                      {/* ‚úÖ –ö–ù–û–ü–ö–ê –ó–ú–Ü–ù–ò –¢–Ü–õ–¨–ö–ò –î–õ–Ø –†–£–ß–ù–û –î–û–î–ê–ù–ò–• */}
                      {!selectedReceipt && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => openProductModal(index)}
                        >
                          {item.product_name ? "–ó–º—ñ–Ω–∏—Ç–∏" : "–û–±—Ä–∞—Ç–∏"}
                        </Button>
                      )}
                    </div>
                  </TableCell>
                  
                  {/* ‚úÖ –û–î–ò–ù–ò–¶–Ø */}
                  <TableCell className="px-4 py-3">
                    <div className="text-center">
                      <span className="text-sm">
                        {item.final_unit_name || item.product_base_unit_name || "‚Äî"}
                      </span>
                      {item.unit_conversion_name && (
                        <div className="text-xs text-blue-600 mt-1">
                          {item.unit_conversion_name}
                        </div>
                      )}
                    </div>
                  </TableCell>
                  
                  {/* ‚úÖ –ö–Ü–õ–¨–ö–Ü–°–¢–¨ */}
                  <TableCell className="px-4 py-3">
                    <Input
                      type="number"
                      value={item.quantity.toString()}
                      onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
                      className="w-24"
                    />
                  </TableCell>
                  
                  {/* ‚úÖ –¶–Ü–ù–ê */}
                  <TableCell className="px-4 py-3">
                    <Input
                      type="number"
                      value={item.price.toString()}
                      onChange={(e) => handleItemChange(index, 'price', e.target.value)}
                      className="w-28"
                    />
                  </TableCell>
                  
                  {/* ‚úÖ –ü–î–í */}
                  <TableCell className="px-4 py-3">
                    <Input
                      type="number"
                      value={item.vat_percent.toString()}
                      onChange={(e) => handleItemChange(index, 'vat_percent', e.target.value)}
                      className="w-20"
                    />
                  </TableCell>
                  
                  {/* ‚úÖ –°–£–ú–ê */}
                  <TableCell className="px-4 py-3">
                    <span className="text-sm font-medium text-red-600 dark:text-red-400">
                      -{formatPrice(item.total)}
                    </span>
                  </TableCell>
                  
                  {/* ‚úÖ –î–Ü–á */}
                  <TableCell className="px-4 py-3">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => removeItem(index)}
                      disabled={form.items.length <= 1}
                      className="text-red-600 hover:text-red-700"
                    >
                      üóëÔ∏è
                    </Button>
                  </TableCell>
                </tr>
              ))}
            </TableBody>
          </Table>
        </div>

        {/* –ü—ñ–¥—Å—É–º–∫–∏ */}
        <div className="mt-6 flex justify-end">
          <div className="w-80 space-y-2 rounded-lg border border-red-200 bg-red-50 p-4 dark:border-red-800 dark:bg-red-900/20">
            <div className="flex justify-between text-sm">
              <span className="text-red-600 dark:text-red-400">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π:</span>
              <span className="font-medium">{form.items.length}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-red-600 dark:text-red-400">–°—É–º–∞ –±–µ–∑ –ü–î–í:</span>
              <span className="font-medium">-{formatPrice(getTotalAmount())}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-red-600 dark:text-red-400">–°—É–º–∞ –ü–î–í:</span>
              <span className="font-medium">-{formatPrice(getTotalVAT())}</span>
            </div>
            <div className="border-t border-red-300 pt-2 dark:border-red-700">
              <div className="flex justify-between">
                <span className="font-semibold text-red-800 dark:text-red-300">–î–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:</span>
                <span className="text-xl font-bold text-red-600 dark:text-red-400">
                  -{formatPrice(getTotalAmount() + getTotalVAT())}
                </span>
              </div>
            </div>
          </div>
        </div>
      </>
    )}
  </div>
</div>

{/* –ú–æ–¥–∞–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É */}
<ProductSelectionModal
  isOpen={showProductModal}
  onClose={() => {
    setShowProductModal(false);
    setCurrentItemIndex(-1);
  }}
  onProductSelect={handleProductSelect}
  onMultipleProductsSelect={handleMultipleProductsSelect}
  multiSelect={currentItemIndex === -1}
  selectedWarehouse={form.warehouse}
/>

{/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è */}
<ConfirmModal
  isOpen={showSaveModal}
  title="–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è?"
  description="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É?"
  onConfirm={() => {
    setShowSaveModal(false);
    handleSave();
  }}
  onClose={() => setShowSaveModal(false)}
/>
{/* –ú–æ–¥–∞–ª–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è */}
<ReceiptSelectionModal
  isOpen={showReceiptModal}
  onClose={() => setShowReceiptModal(false)}
  onSelect={handleReceiptSelect}
  company={form.company}
  firm={form.firm}
  warehouse={form.warehouse || 0}
/>
   </>
 );
}


        
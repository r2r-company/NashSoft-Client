import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import axios from "./../../../config/api";

import PageMeta from "../../../components/common/PageMeta";
import PageBreadcrumb from "../../../components/common/PageBreadCrumb";
import Button from "../../../components/ui/button/Button";
import Input from "../../../components/ui/input/Input";
import Select from "../../../components/form/Select";
import ConfirmModal from "../../../components/ui/modal/ConfirmModal";
import Alert from "../../../components/ui/alert/Alert";

type AccessGroup = {
  id: number;
  code: string;
  name: string;
  access_group: number;
  access_group_name: string;
  permissions_count: number;
};

type AccessGroupOption = {
  id: number;
  name: string;
};

export default function AccessGroupDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();

  const [accessGroup, setAccessGroup] = useState<AccessGroup | null>(null);
  const [form, setForm] = useState<Partial<AccessGroup>>({});
  const [changed, setChanged] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [showAlert] = useState(false);
  const [accessGroupOptions, setAccessGroupOptions] = useState<AccessGroupOption[]>([]);
  const [loading, setLoading] = useState(true);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  useEffect(() => {
    const loadData = async () => {
      try {
        // API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–æ—Å—Ç—É–ø—É –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É
        const response = await axios.get("access-groups/");
        const accessGroups = response.data;
        const foundAccessGroup = accessGroups.find((ag: AccessGroup) => ag.id === parseInt(id || "0"));
        
        if (foundAccessGroup) {
          setAccessGroup(foundAccessGroup);
          setForm(foundAccessGroup);
        } else {
          toast.error("–ì—Ä—É–ø—É –¥–æ—Å—Ç—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
          navigate("/access-groups");
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–ø—Ü—ñ—ó –≥—Ä—É–ø –¥–æ—Å—Ç—É–ø—É
        loadAccessGroupOptions();
        setLoading(false);
      } catch (error) {
        console.error("Error loading data:", error);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö");
        setLoading(false);
      }
    };

    if (id) {
      loadData();
    }
  }, [id, navigate]);

  const loadAccessGroupOptions = () => {
    // –ü–æ–∫–∏ —â–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    setAccessGroupOptions([
      { id: 1, name: "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏" },
      { id: 2, name: "–ö–∞—Å–∏—Ä–∏" },
      { id: 3, name: "–ú–µ–Ω–µ–¥–∂–µ—Ä–∏" },
      { id: 4, name: "–°—Ç–∞—Ä—à—ñ –∫–∞—Å–∏—Ä–∏" }
    ]);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm({
      ...form,
      [name]: value,
    });
    setChanged(true);
  };

  const handleAccessGroupSelectChange = (value: string) => {
    setForm({ ...form, access_group: parseInt(value) });
    setChanged(true);
  };

  const handleSave = () => {
    // API –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    toast.error("API –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –¥–æ—Å—Ç—É–ø—É –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ‚ùå");
    
    // –ö–æ–ª–∏ API –±—É–¥–µ –≥–æ—Ç–æ–≤–µ, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏:
    /*
    if (!form.code || !form.name || !form.access_group) {
      toast.error("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è ‚ùó");
      return;
    }

    const requestBody = {
      code: form.code,
      name: form.name,
      access_group: form.access_group,
    };

    axios
      .put(`access-groups/${id}/`, requestBody)
      .then((res) => {
        const updatedAccessGroupData = res.data;
        
        setAccessGroup(updatedAccessGroupData);
        setForm(updatedAccessGroupData);
        setChanged(false);
        setIsEditing(false);
        setShowAlert(true);
        setTimeout(() => setShowAlert(false), 3000);
      })
      .catch((err) => {
        console.error("PUT error:", err.response?.data);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ ‚ùå");
      });
    */
  };

  const handleDelete = () => {
    // API –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    toast.error("API –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –¥–æ—Å—Ç—É–ø—É –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ‚ùå");
    
    // –ö–æ–ª–∏ API –±—É–¥–µ –≥–æ—Ç–æ–≤–µ, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏:
    /*
    axios
      .delete(`access-groups/${id}/`)
      .then(() => {
        toast.success("–ì—Ä—É–ø—É –¥–æ—Å—Ç—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ üóëÔ∏è");
        navigate("/access-groups");
      })
      .catch(() => {
        toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ ‚ùå");
      });
    */
  };

  if (loading || !accessGroup) return <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;

  return (
    <>
      <PageMeta title={`–ì—Ä—É–ø–∞ –¥–æ—Å—Ç—É–ø—É ${accessGroup.name} | –ù–∞—à–°–æ—Ñ—Ç`} description="–î–µ—Ç–∞–ª—ñ –≥—Ä—É–ø–∏ –¥–æ—Å—Ç—É–ø—É" />
      <PageBreadcrumb
        crumbs={[
          { label: "–ì—Ä—É–ø–∏ –¥–æ—Å—Ç—É–ø—É", href: "/access-groups" },
          { label: ` ${accessGroup.name}` },
        ]}
      />

      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-800 dark:text-white">
          –î–µ—Ç–∞–ª—ñ –≥—Ä—É–ø–∏ –¥–æ—Å—Ç—É–ø—É
        </h1>
        <div className="flex gap-3">
          <Button variant="primary" size="sm" onClick={() => navigate("/access-groups")}>
            –ù–∞–∑–∞–¥
          </Button>
          {!isEditing && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setIsEditing(true)}
            >
              –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
            </Button>
          )}
          {changed && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setShowSaveModal(true)}
            >
              –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
            </Button>
          )}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => setShowDeleteModal(true)}
          >
            –í–∏–¥–∞–ª–∏—Ç–∏
          </Button>
        </div>
      </div>

      <div className="w-full rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
        <div className="grid gap-6 sm:max-w-md">
          <Input
            label="–ö–æ–¥ –≥—Ä—É–ø–∏"
            name="code"
            value={form.code || ""}
            onChange={handleChange}
            disabled={!isEditing}
            placeholder="–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: manager"
          />

          <Input
            label="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏"
            name="name"
            value={form.name || ""}
            onChange={handleChange}
            disabled={!isEditing}
            placeholder="–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–µ–Ω–µ–¥–∂–µ—Ä"
          />

          <div>
            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
              –ì—Ä—É–ø–∞ –¥–æ—Å—Ç—É–ø—É
            </label>
            <Select
              options={accessGroupOptions.map(option => ({
                value: option.id.toString(),
                label: option.name
              }))}
              defaultValue={form.access_group?.toString() || ""}
              key={`access-group-${form.access_group}-${isEditing}`}
              onChange={handleAccessGroupSelectChange}
              placeholder="–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–æ—Å—Ç—É–ø—É"
              className={!isEditing ? "pointer-events-none opacity-60" : ""}
            />
          </div>

          {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–∑–≤–æ–ª–∏ */}
          <div className="rounded-lg border border-gray-200 p-4 dark:border-white/10">
            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
              –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–∑–≤–æ–ª–∏
            </label>
            <div className="flex items-center gap-2">
              <span className="inline-flex px-3 py-2 text-sm font-medium rounded-full bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300">
                {accessGroup.permissions_count} –¥–æ–∑–≤–æ–ª—ñ–≤
              </span>
            </div>
            <div className="mt-2 text-xs text-gray-500 dark:text-gray-400">
              –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–∑–≤–æ–ª—ñ–≤ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≥—Ä—É–ø–∏
            </div>
          </div>
        </div>
      </div>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫ –ø—Ä–æ –æ–±–º–µ–∂–µ–Ω–Ω—è API */}
      <div className="mt-6 rounded-lg border border-amber-200 bg-amber-50 p-4 dark:border-amber-800 dark:bg-amber-900/20">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-amber-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-amber-800 dark:text-amber-200">
              –û–±–º–µ–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
            </h3>
            <div className="mt-2 text-sm text-amber-700 dark:text-amber-300">
              <p>
                –î–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö. API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø –¥–æ—Å—Ç—É–ø—É –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.
              </p>
            </div>
          </div>
        </div>
      </div>

      <ConfirmModal
        isOpen={showDeleteModal}
        title="–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É –¥–æ—Å—Ç—É–ø—É?"
        description="–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏."
        onConfirm={handleDelete}
        onClose={() => setShowDeleteModal(false)}
      />

      <ConfirmModal
        isOpen={showSaveModal}
        title="–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏?"
        description="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ü—ñ –∑–º—ñ–Ω–∏?"
        onConfirm={() => {
          setShowSaveModal(false);
          handleSave();
        }}
        onClose={() => setShowSaveModal(false)}
      />

      {showAlert && (
        <div className="fixed bottom-6 left-1/2 z-50 w-[90%] max-w-md -translate-x-1/2">
          <Alert
            variant="success"
            title="–£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
            message="–ì—Ä—É–ø—É –¥–æ—Å—Ç—É–ø—É –æ–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫"
          />
        </div>
      )}
    </>
  );
}
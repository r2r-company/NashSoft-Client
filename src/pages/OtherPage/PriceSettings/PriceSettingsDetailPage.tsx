import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "../../../config/api";
import toast from "react-hot-toast";
import PageMeta from "../../../components/common/PageMeta";
import PageBreadcrumb from "../../../components/common/PageBreadCrumb";
import Button from "../../../components/ui/button/Button";
import ConfirmModal from "../../../components/ui/modal/ConfirmModal";

import {
  Table,
  TableBody,
  TableCell,
  TableHeader,
} from "../../../components/ui/table";

// –¢–∏–ø–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
type PriceSettingDocument = {
  id: number;
  doc_number: string;
  date: string;
  company: number;
  company_name: string;
  firm: number;
  firm_name: string;
  valid_from: string;
  status: string;
  base_type?: string;
  base_receipt?: number;
  base_receipt_number?: string;
  base_group?: number;
  base_group_name?: string;
  base_price_type?: number;
  base_price_type_name?: string;
  trade_points: TradePointInfo[];
  items: PriceSettingItem[];
  created_at: string;
  updated_at: string;
};

type PriceSettingItem = {
  id: number;
  product: number;
  product_name: string;
  product_code: string;
  product_unit: string;
  price_type: number;
  price_type_name: string;
  price: number;
  vat_percent: number;
  vat_included: boolean;
  markup_percent: number;
  unit: number;
  unit_name: string;
  unit_conversion: number | null;
  trade_point: number;
  trade_point_name: string;
  firm: number;
  price_without_vat: number;
  vat_amount: number;
  price_with_vat: number;
};

type TradePointInfo = {
  id: number;
  name: string;
  address?: string;
  items_count: number;
};

// –°—Ç–∞—Ç—É—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
const STATUS_LABELS = {
  draft: "–ß–µ—Ä–Ω–µ—Ç–∫–∞",
  approved: "–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
  cancelled: "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
};

const STATUS_COLORS = {
  draft: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400",
  approved: "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400",
  cancelled: "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400"
};

// –¢–∏–ø–∏ –±–∞–∑—É–≤–∞–Ω–Ω—è
const BASE_TYPE_LABELS = {
  receipt: "üì¶ –ù–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è",
  product_group: "üìÅ –ü–æ –≥—Ä—É–ø—ñ —Ç–æ–≤–∞—Ä—ñ–≤",
  price_type: "üí∞ –ü–æ —Ç–∏–ø—É —Ü—ñ–Ω–∏"
};

export default function PriceSettingsDetailPage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  
  const [document, setDocument] = useState<PriceSettingDocument | null>(null);
  const [loading, setLoading] = useState(true);
  const [processing, setProcessing] = useState(false);
  const [showApproveModal, setShowApproveModal] = useState(false);
  const [showUnapproveModal, setShowUnapproveModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedTradePoint, setSelectedTradePoint] = useState<number | null>(null);

  useEffect(() => {
    if (id && !isNaN(parseInt(id))) {
      loadDocument(parseInt(id));
    } else {
      console.error("Invalid document ID:", id);
      toast.error("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞");
      navigate("/price-settings");
    }
  }, [id, navigate]);

  const loadDocument = async (documentId: number) => {
    if (!documentId || isNaN(documentId)) {
      console.error("Invalid document ID provided:", documentId);
      toast.error("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞");
      navigate("/price-settings");
      return;
    }

    try {
      setLoading(true);
      console.log(`Loading price setting document ${documentId}...`);
      
      const response = await axios.get(`price-setting-documents/${documentId}/`)


      console.log("‚úÖ Price setting document loaded:", response.data);
      
      setDocument(response.data);
      
    } catch (error) {
      console.error("‚ùå Error loading price setting document:", error);
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è");
      navigate("/price-settings");
    } finally {
      setLoading(false);
    }
  };

  const handleApproveDocument = async () => {
  if (!document) return;
  
  try {
    setProcessing(true);
    console.log("Approving price setting document...");
    
    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô ENDPOINT:
    await axios.get(`price-setting-document-action/?id=${document.id}&action=approve`);
    console.log("‚úÖ Document approved");
    
    toast.success("–î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ");
    
    // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
    loadDocument(document.id);
  } catch (error) {
    console.error("Error approving document:", error);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚ùå");
  } finally {
    setProcessing(false);
    setShowApproveModal(false);
  }
};

const handleUnapproveDocument = async () => {
  if (!document) return;
  
  try {
    setProcessing(true);
    console.log("Unapproving price setting document...");
    
    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô ENDPOINT:
    await axios.get(`price-setting-document-action/?id=${document.id}&action=unapprove`);
    console.log("‚úÖ Document unapproved");
    
    toast.success("–î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ");
    
    // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
    loadDocument(document.id);
  } catch (error) {
    console.error("Error unapproving document:", error);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
  } finally {
    setProcessing(false);
    setShowUnapproveModal(false);
  }
};

  const handleDeleteDocument = async () => {
    if (!document) return;
    
    try {
      console.log("Deleting price setting document...");
      
      await axios.delete(`price-setting-documents/${document.id}/`);
      console.log("‚úÖ Document deleted");
      
      toast.success("–î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ");
      navigate("/price-settings");
    } catch (error) {
      console.error("Error deleting document:", error);
      toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
    } finally {
      setShowDeleteModal(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('uk-UA', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatDateOnly = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('uk-UA', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
  };

  const formatPrice = (price: number | string | null | undefined) => {
  const numeric = typeof price === "string" ? parseFloat(price) : price;
  return typeof numeric === "number" && !isNaN(numeric) 
    ? `${numeric.toFixed(2)} ‚Ç¥`
    : "‚Äî";
};

  const getStatusBadge = (status: string) => {
    const label = STATUS_LABELS[status as keyof typeof STATUS_LABELS] || status;
    const colorClass = STATUS_COLORS[status as keyof typeof STATUS_COLORS] || STATUS_COLORS.draft;
    
    return (
      <span className={`inline-flex px-3 py-1 text-sm font-medium rounded-full ${colorClass}`}>
        {label}
      </span>
    );
  };

  const getFilteredItems = () => {
    if (!document) return [];
    
    if (selectedTradePoint === null) {
      return document.items;
    }
    
    return document.items.filter(item => item.trade_point === selectedTradePoint);
  };

  const getGroupedItems = () => {
    const filteredItems = getFilteredItems();
    const grouped: Record<number, PriceSettingItem[]> = {};
    
    filteredItems.forEach(item => {
      if (!grouped[item.product]) {
        grouped[item.product] = [];
      }
      grouped[item.product].push(item);
    });
    
    return grouped;
  };

  const getStatistics = () => {
    if (!document) return { totalItems: 0, uniqueProducts: 0, avgPrice: 0, tradePoints: 0 };
    
    const filteredItems = getFilteredItems();
    const uniqueProducts = new Set(filteredItems.map(item => item.product)).size;
    const avgPrice = filteredItems.length > 0 
      ? filteredItems.reduce((sum, item) => sum + item.price, 0) / filteredItems.length 
      : 0;
    
    return {
      totalItems: filteredItems.length,
      uniqueProducts,
      avgPrice,
      tradePoints: document.trade_points.length
    };
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è...</p>
        </div>
      </div>
    );
  }

  if (!document) {
    return (
      <div className="text-center py-12">
        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
          –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        </h3>
        <Button variant="primary" onClick={() => navigate("/price-settings")}>
          –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É
        </Button>
      </div>
    );
  }

  const stats = getStatistics();

  return (
    <>
      <PageMeta 
        title={`–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è ${document.doc_number} | –ù–∞—à–°–æ—Ñ—Ç`} 
        description={`–î–µ—Ç–∞–ª—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è ${document.doc_number}`} 
      />
      <PageBreadcrumb
        crumbs={[
          { label: "–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è", href: "/price-settings" },
          { label: document.doc_number }
        ]}
      />

      <div className="mb-6 flex items-center justify-between">
        <div>
          <div className="flex items-center gap-3 mb-2">
            <h1 className="text-2xl font-semibold text-gray-800 dark:text-white">
              üí∞ –¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {document.doc_number}
            </h1>
            {getStatusBadge(document.status)}
          </div>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            –°—Ç–≤–æ—Ä–µ–Ω–æ: {formatDate(document.created_at)} | –î—ñ—î –∑: {formatDateOnly(document.valid_from)}
          </p>
        </div>
        <div className="flex gap-3">
          <Button variant="outline" size="sm" onClick={() => navigate("/price-settings")}>
            ‚Üê –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É
          </Button>
          {document.status === 'draft' && (
            <>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => navigate(`/price-settings/${document.id}/edit`)}
              >
                –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
              </Button>
              <Button 
                variant="primary" 
                size="sm" 
                onClick={() => setShowApproveModal(true)}
                disabled={processing}
              >
                {processing ? "–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è..." : "‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏"}
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setShowDeleteModal(true)}
                className="text-red-600 hover:text-red-700 hover:border-red-300"
              >
                üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
              </Button>
            </>
          )}
          {document.status === 'approved' && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setShowUnapproveModal(true)}
              disabled={processing}
            >
              {processing ? "–†–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è..." : "üîÑ –†–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏"}
            </Button>
          )}
        </div>
      </div>

      <div className="grid gap-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
          <h2 className="mb-4 text-lg font-semibold text-gray-800 dark:text-white">
            –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
          </h2>
          <div className="grid gap-6 md:grid-cols-2">
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium text-gray-500 dark:text-gray-400">–ö–æ–º–ø–∞–Ω—ñ—è</label>
                <div className="text-gray-900 dark:text-white">{document.company_name}</div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500 dark:text-gray-400">–§—ñ—Ä–º–∞</label>
                <div className="text-gray-900 dark:text-white">{document.firm_name}</div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500 dark:text-gray-400">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –¥—ñ—ó</label>
                <div className="text-gray-900 dark:text-white">{formatDateOnly(document.valid_from)}</div>
              </div>
            </div>
            <div className="space-y-4">
              {document.base_type && (
                <div>
                  <label className="text-sm font-medium text-gray-500 dark:text-gray-400">–ë–∞–∑—É–≤–∞–Ω–Ω—è</label>
                  <div className="text-gray-900 dark:text-white">
                    {BASE_TYPE_LABELS[document.base_type as keyof typeof BASE_TYPE_LABELS]}
                  </div>
                  {document.base_receipt_number && (
                    <div className="text-sm text-gray-500">
                      –î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è: {document.base_receipt_number}
                    </div>
                  )}
                  {document.base_group_name && (
                    <div className="text-sm text-gray-500">
                      –ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤: {document.base_group_name}
                    </div>
                  )}
                  {document.base_price_type_name && (
                    <div className="text-sm text-gray-500">
                      –¢–∏–ø —Ü—ñ–Ω–∏: {document.base_price_type_name}
                    </div>
                  )}
                </div>
              )}
              <div>
                <label className="text-sm font-medium text-gray-500 dark:text-gray-400">–¢–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫</label>
                <div className="text-gray-900 dark:text-white">{document.trade_points.length}</div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500 dark:text-gray-400">–í—Å—å–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π</label>
                <div className="text-gray-900 dark:text-white">{document.items.length}</div>
              </div>
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
          <h2 className="mb-4 text-lg font-semibold text-gray-800 dark:text-white">
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          </h2>
          <div className="grid gap-4 md:grid-cols-4">
            <div className="text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">{stats.tradePoints}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">–¢–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫</div>
            </div>
            <div className="text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
              <div className="text-2xl font-bold text-green-600 dark:text-green-400">{stats.uniqueProducts}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤</div>
            </div>
            <div className="text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
              <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">{stats.totalItems}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">–ü–æ–∑–∏—Ü—ñ–π —Ü—ñ–Ω</div>
            </div>
            <div className="text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
              <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">{formatPrice(stats.avgPrice)}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞</div>
            </div>
          </div>
        </div>

        {/* –¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ */}
        <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
          <h2 className="mb-4 text-lg font-semibold text-gray-800 dark:text-white">
            –¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ ({document.trade_points.length})
          </h2>
          <div className="grid gap-3 md:grid-cols-2 lg:grid-cols-3">
            <div 
              className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                selectedTradePoint === null 
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' 
                  : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => setSelectedTradePoint(null)}
            >
              <div className="font-medium text-gray-900 dark:text-white">
                üè™ –í—Å—ñ —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏
              </div>
              <div className="text-sm text-gray-500">
                {document.items.length} –ø–æ–∑–∏—Ü—ñ–π
              </div>
            </div>
            {document.trade_points.map(tradePoint => (
              <div 
                key={tradePoint.id}
                className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                  selectedTradePoint === tradePoint.id 
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => setSelectedTradePoint(tradePoint.id)}
              >
                <div className="font-medium text-gray-900 dark:text-white">
                  üè™ {tradePoint.name}
                </div>
                {tradePoint.address && (
                  <div className="text-xs text-gray-500 mb-1">
                    {tradePoint.address}
                  </div>
                )}
                <div className="text-sm text-gray-500">
                  {tradePoint.items_count} –ø–æ–∑–∏—Ü—ñ–π
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –ü–æ–∑–∏—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
        <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
          <div className="mb-4 flex items-center justify-between">
            <h2 className="text-lg font-semibold text-gray-800 dark:text-white">
              –ü–æ–∑–∏—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ ({stats.totalItems})
              {selectedTradePoint && (
                <span className="ml-2 text-sm text-gray-500">
                  - {document.trade_points.find(tp => tp.id === selectedTradePoint)?.name}
                </span>
              )}
            </h2>
            {selectedTradePoint && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setSelectedTradePoint(null)}
              >
                –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ
              </Button>
            )}
          </div>

          {stats.totalItems === 0 ? (
            <div className="text-center py-8 text-gray-500">
              {selectedTradePoint 
                ? "–ü–æ–∑–∏—Ü—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
                : "–ü–æ–∑–∏—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ"
              }
            </div>
          ) : (
            <div className="space-y-6">
              {Object.entries(getGroupedItems()).map(([productId, items]) => {
                const firstItem = items[0];
                
                return (
                  <div key={productId} className="border border-gray-200 rounded-lg overflow-hidden">
                    <div className="bg-gray-50 dark:bg-gray-800/50 px-4 py-3 border-b border-gray-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="font-medium text-gray-900 dark:text-white">
                            üì¶ {firstItem.product_name}
                          </h3>
                          <p className="text-sm text-gray-500">
                            –ö–æ–¥: {firstItem.product_code || "‚Äî"} ‚Ä¢ –û–¥–∏–Ω–∏—Ü—è: {firstItem.unit_name}
                          </p>
                        </div>
                        <div className="text-right">
                          <div className="text-sm text-gray-500">ID —Ç–æ–≤–∞—Ä—É</div>
                          <div className="font-medium">{firstItem.product}</div>
                        </div>
                      </div>
                    </div>

                    <div className="overflow-x-auto">
                      <Table>
                        <TableHeader>
                          <tr className="border-b border-gray-200 dark:border-white/10">
                            <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                              –¢–æ—Ä–≥–æ–≤–∞ —Ç–æ—á–∫–∞
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
                              –¢–∏–ø —Ü—ñ–Ω–∏
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-right text-sm font-semibold text-gray-600 dark:text-white">
                              –¶—ñ–Ω–∞
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-right text-sm font-semibold text-gray-600 dark:text-white">
                              –ü–î–í %
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-right text-sm font-semibold text-gray-600 dark:text-white">
                              –ù–∞—Ü—ñ–Ω–∫–∞ %
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
                              –ó –ü–î–í
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-right text-sm font-semibold text-gray-600 dark:text-white">
                              –¶—ñ–Ω–∞ –±–µ–∑ –ü–î–í
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-right text-sm font-semibold text-gray-600 dark:text-white">
                              –°—É–º–∞ –ü–î–í
                            </TableCell>
                            <TableCell isHeader className="px-4 py-3 text-right text-sm font-semibold text-gray-600 dark:text-white">
                              –¶—ñ–Ω–∞ –∑ –ü–î–í
                            </TableCell>
                          </tr>
                        </TableHeader>

                        <TableBody>
                          {items.map((item) => (
                            <tr key={`${item.product}-${item.trade_point}-${item.price_type}`} className="border-b border-gray-100 dark:border-white/10">
                              <TableCell className="px-4 py-3">
                                <div className="font-medium text-gray-900 dark:text-white">
                                  üè™ {item.trade_point_name}
                                </div>
                              </TableCell>
                              <TableCell className="px-4 py-3">
                                <span className="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
                                  {item.price_type_name}
                                </span>
                              </TableCell>
                              <TableCell className="px-4 py-3 text-right font-medium text-gray-900 dark:text-white">
                                {formatPrice(item.price)}
                              </TableCell>
                              <TableCell className="px-4 py-3 text-right text-gray-900 dark:text-white">
                                {item.vat_percent}%
                              </TableCell>
                              <TableCell className="px-4 py-3 text-right text-gray-900 dark:text-white">
                                {item.markup_percent}%
                              </TableCell>
                              <TableCell className="px-4 py-3 text-center">
                                {item.vat_included ? (
                                  <span className="text-green-600 dark:text-green-400">‚úÖ</span>
                                ) : (
                                  <span className="text-red-600 dark:text-red-400">‚ùå</span>
                                )}
                              </TableCell>
                              <TableCell className="px-4 py-3 text-right text-gray-900 dark:text-white">
                                {formatPrice(item.price_without_vat)}
                              </TableCell>
                              <TableCell className="px-4 py-3 text-right text-gray-900 dark:text-white">
                                {formatPrice(item.vat_amount)}
                              </TableCell>
                              <TableCell className="px-4 py-3 text-right font-medium text-green-600 dark:text-green-400">
                                {formatPrice(item.price_with_vat)}
                              </TableCell>
                            </tr>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {/* –ü—ñ–¥—Å—É–º–∫–∏ */}
          {stats.totalItems > 0 && (
            <div className="mt-6 flex justify-end">
              <div className="w-80 space-y-2 rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-white/10 dark:bg-white/5">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">
                    {selectedTradePoint ? "–ü–æ–∑–∏—Ü—ñ–π –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ñ–π —Ç–æ—á—Ü—ñ:" : "–í—Å—å–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π:"}
                  </span>
                  <span className="font-medium">{stats.totalItems}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:</span>
                  <span className="font-medium">{stats.uniqueProducts}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞:</span>
                  <span className="font-medium">{formatPrice(stats.avgPrice)}</span>
                </div>
                <div className="border-t border-gray-300 pt-2 dark:border-white/20">
                  <div className="flex justify-between">
                    <span className="font-semibold text-gray-800 dark:text-white">–ú—ñ–Ω. —Ü—ñ–Ω–∞:</span>
                    <span className="text-lg font-bold text-red-600 dark:text-red-400">
                      {formatPrice(Math.min(...getFilteredItems().map(item => item.price)))}
                    </span>
                  </div>
                  <div className="flex justify-between mt-1">
                    <span className="font-semibold text-gray-800 dark:text-white">–ú–∞–∫—Å. —Ü—ñ–Ω–∞:</span>
                    <span className="text-lg font-bold text-green-600 dark:text-green-400">
                      {formatPrice(Math.max(...getFilteredItems().map(item => item.price)))}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞ */}
      <ConfirmModal
        isOpen={showApproveModal}
        title="–ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è?"
        description={`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç ${document.doc_number}? –ü—ñ—Å–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏ —Å—Ç–∞–Ω—É—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏.`}
        onConfirm={handleApproveDocument}
        onClose={() => setShowApproveModal(false)}
      />

      <ConfirmModal
        isOpen={showUnapproveModal}
        title="–†–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è?"
        description={`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç ${document.doc_number}? –¶—ñ–Ω–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç—å –¥—ñ—è—Ç–∏.`}
        onConfirm={handleUnapproveDocument}
        onClose={() => setShowUnapproveModal(false)}
      />

      <ConfirmModal
        isOpen={showDeleteModal}
        title="–í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è?"
        description={`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç ${document.doc_number}? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.`}
        onConfirm={handleDeleteDocument}
        onClose={() => setShowDeleteModal(false)}
      />
    </>
  );
}
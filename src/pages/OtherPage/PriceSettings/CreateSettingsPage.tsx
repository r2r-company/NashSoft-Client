import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../../config/api";
import toast from "react-hot-toast";
import PageMeta from "../../../components/common/PageMeta";
import PageBreadcrumb from "../../../components/common/PageBreadCrumb";
import Button from "../../../components/ui/button/Button";
import Input from "../../../components/ui/input/Input";
import Select from "../../../components/form/Select";
import ConfirmModal from "../../../components/ui/modal/ConfirmModal";
import ProductSelectionModal from "../../../pages/OtherPage/Products/ProductSelectionModal";
import {
  Table,
  TableBody,
  TableCell,
  TableHeader,
} from "../../../components/ui/table";

// ‚úÖ –¢–ò–ü–ò –í–Ü–î–ü–û–í–Ü–î–ù–û –î–û –¢–í–û–á–• MODELS
type PriceSettingForm = {
  company: number;
  firm: number;
  valid_from: string;
  base_type: string;
  base_receipt: number | undefined;
  base_group: number | undefined;
  base_price_type: number | undefined;
  trade_points: number[];
  items: PriceSettingItem[];
  comment?: string;
};

// ‚úÖ –í–Ü–î–ü–û–í–Ü–î–ê–Ñ –¢–í–û–á–ô PriceSettingItem –ú–û–î–ï–õ–Ü  
type PriceSettingItem = {
  product: number | undefined;
  product_name?: string;
  product_base_unit?: number;      // ‚úÖ –ë–ê–ó–û–í–ê –û–î–ò–ù–ò–¶–Ø –¢–û–í–ê–†–£
  product_base_unit_name?: string; // ‚úÖ –ù–ê–ó–í–ê –ë–ê–ó–û–í–û–á –û–î–ò–ù–ò–¶–Ü
  
  price_type: number;
  base_price: number;              // ‚úÖ –¶–Ü–ù–ê –ó–ê –ë–ê–ó–û–í–£ –û–î–ò–ù–ò–¶–Æ
  price: number;                   // ‚úÖ –§–Ü–ù–ê–õ–¨–ù–ê –¶–Ü–ù–ê (–†–û–ó–†–ê–•–û–í–£–Ñ–¢–¨–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û)
  
  // ‚úÖ –§–ê–°–£–í–ê–ù–ù–Ø (–û–ü–¶–Ü–ô–ù–û):
  unit_conversion: number | null;  // ‚úÖ ID —Ñ–∞—Å—É–≤–∞–Ω–Ω—è –∞–±–æ null
  unit_conversion_name?: string;   // ‚úÖ –ù–ê–ó–í–ê –§–ê–°–£–í–ê–ù–ù–Ø
  final_unit?: number;             // ‚úÖ –§–Ü–ù–ê–õ–¨–ù–ê –û–î–ò–ù–ò–¶–Ø –¶–Ü–ù–ò
  final_unit_name?: string;        // ‚úÖ –ù–ê–ó–í–ê –§–Ü–ù–ê–õ–¨–ù–û–á –û–î–ò–ù–ò–¶–Ü
  
  vat_percent: number;
  vat_included: boolean;
  markup_percent: number;
  trade_point: number;
  
  // ‚úÖ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –§–Ü–†–ú–£:
  firm?: number;
  firm_name?: string;
  firm_is_vat_payer?: boolean;
  price_without_vat?: number;
  vat_amount?: number;
  price_with_vat?: number;
};

// ‚úÖ –í–Ü–î–ü–û–í–Ü–î–ê–Ñ –¢–í–û–á–ú SERIALIZERS
type Company = {
  id: number;
  name: string;
  tax_id?: string;
};

type Firm = {
  id: number;
  name: string;
  company_name: string; // ‚úÖ –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó
  company_id: number;   // ‚úÖ ID –∫–æ–º–ø–∞–Ω—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  is_vat: boolean; 
  vat_type: string;
};

type TradePoint = {
  id: number;
  name: string;
  firm: number;
  firm_name?: string;
};

type PriceType = {
  id: number;
  name: string;
  is_default: boolean;
};

type ProductGroup = {
  id: number;
  name: string;
  parent?: number;
};

type Product = {
  id: number;
  name: string;
  unit?: number;                   // ‚úÖ –ë–ê–ó–û–í–ê –û–î–ò–ù–ò–¶–Ø
  unit_name?: string;              // ‚úÖ –ù–ê–ó–í–ê –ë–ê–ó–û–í–û–á –û–î–ò–ù–ò–¶–Ü
  group_id?: number;
  group_name?: string;
  price?: number;
  base_price?: number;             // ‚úÖ –ë–ê–ó–û–í–ê –¶–Ü–ù–ê –ó–ê –ë–ê–ó–û–í–£ –û–î–ò–ù–ò–¶–Æ
  conversions?: ProductUnitConversion[];  // ‚úÖ –°–ü–ò–°–û–ö –§–ê–°–£–í–ê–ù–¨
};

type Receipt = {
  id: number;
  doc_number: string;
  date: string;
  status: string;
};

type Unit = {
  id: number;
  name: string;
  symbol?: string;
};

type Supplier = {
  id: number;
  name: string;
  code?: string;
};

type ProductUnitConversion = {
  id: number;
  name: string;                   
  product: number;
  from_unit: number;               
  to_unit: number;                 
  factor: number;                  
  from_unit_name: string;         
  to_unit_name: string;          
};

type SelectedProductWithUnit = {
  product: Product;
  unit_conversion_id: number | null;
  unit_name: string;
  unit_symbol: string;
  factor: number;
};

export default function CreatePriceSettingsPage() {
  const navigate = useNavigate();
  
  const [form, setForm] = useState<PriceSettingForm>({
    company: 0,
    firm: 0,
    valid_from: new Date().toISOString().split('T')[0],
    base_type: '',
    base_receipt: undefined,
    base_group: undefined,
    base_price_type: undefined,
    trade_points: [],
    items: [],
    comment: ''
  });

  const [companies, setCompanies] = useState<Company[]>([]);
  const [firms, setFirms] = useState<Firm[]>([]);
  const [tradePoints, setTradePoints] = useState<TradePoint[]>([]);
  const [priceTypes, setPriceTypes] = useState<PriceType[]>([]);
  const [productGroups, setProductGroups] = useState<ProductGroup[]>([]);
  const [receipts, setReceipts] = useState<Receipt[]>([]);
  const [units, setUnits] = useState<Unit[]>([]);
  const [allProducts, setAllProducts] = useState<Product[]>([]);
  
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [showProductModal, setShowProductModal] = useState(false);
  const [currentItemIndex, setCurrentItemIndex] = useState<number>(-1);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  
  const [loadingData, setLoadingData] = useState({
    firms: false,
    tradePoints: false,
    receipts: false
  });
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [selectedSupplier, setSelectedSupplier] = useState<number | null>(null);

  useEffect(() => {
    loadDictionaries();
  }, []);


const calculateFinalPrice = (item: PriceSettingItem, conversions: ProductUnitConversion[]): PriceSettingItem => {
  // ‚úÖ –ü–†–û–°–¢–û: —è–∫—É —Ü—ñ–Ω—É –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - —Ç–∞–∫–∞ —ñ –±—É–¥–µ!
  let finalPrice = item.base_price; // –¶—ñ–Ω–∞ —è–∫—É –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  let finalUnit = item.product_base_unit;
  let finalUnitName = item.product_base_unit_name;
  let conversionName = "";

  console.log("üî• calculateFinalPrice - –ë–ï–ó –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó:");
  console.log("  - user input price:", item.base_price);
  console.log("  - unit_conversion:", item.unit_conversion);

  // ‚úÖ –Ø–ö–©–û –û–ë–†–ê–ù–û –§–ê–°–£–í–ê–ù–ù–Ø - –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—é—î–º–æ –Ω–∞–∑–≤—É –æ–¥–∏–Ω–∏—Ü—ñ
  if (item.unit_conversion) {
    const conversion = conversions.find(c => c.id === item.unit_conversion);
    
    if (conversion) {
      // ‚úÖ –ù–ï –î–Ü–õ–ò–ú–û! –ü—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º–æ —Ü—ñ–Ω—É —è–∫ —î —ñ –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –æ–¥–∏–Ω–∏—Ü—é
      finalPrice = item.base_price; // –¶—ñ–Ω–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–∞ –∂!
      finalUnit = conversion.to_unit;
      finalUnitName = conversion.to_unit_name;
      conversionName = conversion.name;
      
      console.log("  - keeping price as is:", finalPrice, "for", finalUnitName);
    }
  }

  return {
    ...item,
    price: finalPrice, // –¢–∞ —Å–∞–º–∞ —Ü—ñ–Ω–∞ —â–æ –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!
    final_unit: finalUnit,
    final_unit_name: finalUnitName,
    unit_conversion_name: conversionName
  };
};

// ‚úÖ –§–£–ù–ö–¶–Ü–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–ê–°–£–í–ê–ù–¨ –î–õ–Ø –¢–û–í–ê–†–£:
const loadProductConversions = async (productId: number): Promise<ProductUnitConversion[]> => {
  try {
    console.log(`Loading conversions for product ${productId}...`);
    const response = await axios.get(`product-unit-conversions/?product=${productId}`);
    console.log("‚úÖ Product conversions loaded:", response.data);
    return response.data || [];
  } catch (error) {
    console.error("‚ùå Error loading product conversions:", error);
    return [];
  }
};

// ‚úÖ –§–£–ù–ö–¶–Ü–Ø –û–ù–û–í–õ–ï–ù–ù–Ø –¢–û–í–ê–†–£ –ó –§–ê–°–£–í–ê–ù–ù–Ø–ú–ò:
const updateItemWithProduct = async (index: number, product: Product) => {
  try {
    // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É
    const conversions = await loadProductConversions(product.id);
    
    // 2. –°–ü–û–ß–ê–¢–ö–£ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è
    setProductConversions(prev => ({
      ...prev,
      [product.id]: conversions
    }));
    
    // 3. –ü–û–¢–Ü–ú –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
    const updatedItems = [...form.items];
    updatedItems[index] = {
      ...updatedItems[index],
      product: product.id,
      product_name: product.name,
      product_base_unit: product.unit,
      product_base_unit_name: product.unit_name,
      base_price: product.base_price || product.price || 0,
      unit_conversion: null,
      unit_conversion_name: "",
      final_unit: product.unit,
      final_unit_name: product.unit_name,
      price: product.base_price || product.price || 0
    };
    
    setForm({ ...form, items: updatedItems });
    
    console.log(`‚úÖ Product ${product.name} updated with ${conversions.length} conversions`);
    
  } catch (error) {
    console.error("‚ùå Error updating product:", error);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É");
  }
};


  const loadSuppliers = async () => {
  try {
    const response = await axios.get("suppliers/");
    console.log("‚úÖ Suppliers loaded:", response.data);
    setSuppliers(response.data);
  } catch (error) {
    console.error("‚ùå Error loading suppliers:", error);
    setSuppliers([]);
  }
};

  const getSelectedFirm = () => {
  return firms.find(f => f.id === form.firm);
};

const isSelectedFirmVatPayer = () => {
  const selectedFirm = getSelectedFirm();
  return selectedFirm?.is_vat || false;
};

const calculateVatForItem = (item: PriceSettingItem) => {
  if (!item.firm_is_vat_payer || item.vat_percent === 0) {
    return {
      price_without_vat: item.price,
      vat_amount: 0,
      price_with_vat: item.price
    };
  }

  let priceWithoutVat: number;
  let vatAmount: number;
  let priceWithVat: number;

  if (item.vat_included) {
    // –¶—ñ–Ω–∞ –í–ö–õ–Æ–ß–ê–Ñ –ü–î–í - –≤–∏—Ç—è–≥—É—î–º–æ –ü–î–í
    priceWithoutVat = Math.round((item.price / (1 + item.vat_percent / 100)) * 100) / 100;
    vatAmount = Math.round((item.price - priceWithoutVat) * 100) / 100;
    priceWithVat = item.price;
  } else {
    // –¶—ñ–Ω–∞ –ë–ï–ó –ü–î–í - –¥–æ–¥–∞—î–º–æ –ü–î–í
    priceWithoutVat = item.price;
    vatAmount = Math.round((item.price * item.vat_percent / 100) * 100) / 100;
    priceWithVat = Math.round((priceWithoutVat + vatAmount) * 100) / 100;
  }

  return { price_without_vat: priceWithoutVat, vat_amount: vatAmount, price_with_vat: priceWithVat };
};

const getProductConversions = (productId: number): ProductUnitConversion[] => {
  const conversions = productConversions[productId] || [];
  console.log(`üî• Getting conversions for product ${productId}:`, conversions);
  return conversions;
};


const handleCompanyChange = (value: string) => {
  const companyId = parseInt(value);
  setForm({ 
    ...form, 
    company: companyId,
    firm: 0, // ‚úÖ –°–∫–∏–¥–∞—î–º–æ —Ñ—ñ—Ä–º—É
    trade_points: [],
    items: []
  });
  
  // –°–∫–∏–¥–∞—î–º–æ –∑–∞–ª–µ–∂–Ω—ñ –¥–∞–Ω—ñ
  setTradePoints([]);
  setReceipts([]);
  setSelectedSupplier(null);
};

// –§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ñ—ñ—Ä–º–∏ –ø–æ –∫–æ–º–ø–∞–Ω—ñ—ó
const getFilteredFirms = () => {
  return firms.filter(firm => firm.company_id === form.company);
};

// ‚úÖ –û–ù–û–í–ò–¢–ò –õ–û–ì–Ü–ö–£ –ü–û–ö–ê–ó–£ –ö–û–õ–û–ù–û–ö:
const shouldShowVatColumns = form.items.some(item => item.firm_is_vat_payer) || isSelectedFirmVatPayer();
  
  
  // ‚úÖ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–û–í–Ü–î–ù–ò–ö–Ü–í –í–Ü–î–ü–û–í–Ü–î–ù–û –î–û –¢–í–û–á–• URLs
  const loadDictionaries = async () => {
  try {
    setLoading(true);
    console.log("Loading dictionaries for price settings...");

    const requests = [
      axios.get("companies/"),
      axios.get("firms/"),
      axios.get("price-types/"),
      axios.get("product-groups/"),
      axios.get("products/"),
      axios.get("units/"),
      axios.get("suppliers/") // ‚úÖ –î–û–î–ê–¢–ò
    ];

      const results = await Promise.allSettled(requests);
      
      if (results[0].status === 'fulfilled') {
        console.log("‚úÖ Companies loaded:", results[0].value.data);
        setCompanies(results[0].value.data);
      } else {
        console.error("‚ùå Error loading companies:", results[0].reason);
        setCompanies([]);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–º–ø–∞–Ω—ñ–π");
      }

      if (results[1].status === 'fulfilled') {
        console.log("‚úÖ Firms loaded:", results[1].value.data);
        setFirms(results[1].value.data);
      } else {
        console.error("‚ùå Error loading firms:", results[1].reason);
        setFirms([]);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ—Ä–º");
      }

      if (results[2].status === 'fulfilled') {
        console.log("‚úÖ Price types loaded:", results[2].value.data);
        setPriceTypes(results[2].value.data);
      } else {
        console.error("‚ùå Error loading price types:", results[2].reason);
        setPriceTypes([]);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ü—ñ–Ω");
      }

      if (results[3].status === 'fulfilled') {
        console.log("‚úÖ Product groups loaded:", results[3].value.data);
        setProductGroups(results[3].value.data);
      } else {
        console.error("‚ùå Error loading product groups:", results[3].reason);
        setProductGroups([]);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤");
      }

      if (results[4].status === 'fulfilled') {
        console.log("‚úÖ Products loaded:", results[4].value.data);
        setAllProducts(results[4].value.data);
      } else {
        console.error("‚ùå Error loading products:", results[4].reason);
        setAllProducts([]);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤");
      }

      if (results[5].status === 'fulfilled') {
        console.log("‚úÖ Units loaded:", results[5].value.data);
        setUnits(results[5].value.data);
      } else {
        console.error("‚ùå Error loading units:", results[5].reason);
        setUnits([]);
        toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É");
      }

      if (results[6].status === 'fulfilled') {
      console.log("‚úÖ Suppliers loaded:", results[6].value.data);
      setSuppliers(results[6].value.data);
    } else {
      console.error("‚ùå Error loading suppliers:", results[6].reason);
      setSuppliers([]);
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤");
    }

   setLoading(false);
  } catch (error) {
    console.error("Error loading dictionaries:", error);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤");
    setLoading(false);
  }
};

  // ‚úÖ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–û–†–ì–û–í–ò–• –¢–û–ß–û–ö –ü–û –§–Ü–†–ú–Ü  
  const loadTradePointsByFirm = async (firmId: number) => {
    setLoadingData(prev => ({ ...prev, tradePoints: true }));
    
    try {
      console.log(`Loading trade points for firm ${firmId}...`);
      const response = await axios.get("trade-points/");
      console.log("‚úÖ All trade points loaded:", response.data);
      
      const filteredTradePoints = response.data.filter((tp: TradePoint) => tp.firm === firmId);
      console.log(`‚úÖ Filtered trade points for firm ${firmId}:`, filteredTradePoints);
      
      setTradePoints(filteredTradePoints);
      
      if (filteredTradePoints.length === 0) {
        console.log(`‚ÑπÔ∏è No trade points found for firm ${firmId}`);
      }
    } catch (error) {
      console.error("‚ùå Error loading trade points:", error);
      setTradePoints([]);
      toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏");
    } finally {
      setLoadingData(prev => ({ ...prev, tradePoints: false }));
    }
  };

  // ‚úÖ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–û–ö–£–ú–ï–ù–¢–Ü–í –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø
const loadReceiptsByFirm = async (firmId: number) => {
  setLoadingData(prev => ({ ...prev, receipts: true }));
  
  try {
    console.log(`Loading receipts for firm ${firmId}...`);
    const response = await axios.get(`documents/?type=receipt&status=posted`);
    console.log("‚úÖ Receipts loaded:", response.data);
    
    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û –í–ò–¢–Ø–ì–£–Ñ–ú–û –î–ê–ù–Ü:
    const receiptsData = response.data.data || [];
    console.log("‚úÖ All receipts:", receiptsData);
    
    // ‚úÖ –§–Ü–õ–¨–¢–†–£–Ñ–ú–û –ü–û –§–Ü–†–ú–Ü:
    const filteredReceipts = receiptsData.filter((receipt: any) => receipt.firm === firmId);
    console.log(`‚úÖ Filtered receipts for firm ${firmId}:`, filteredReceipts);
    
    setReceipts(filteredReceipts);
    
    if (filteredReceipts.length === 0) {
      toast.error(`–ü—Ä–æ–≤–µ–¥–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó —Ñ—ñ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    } else {
      console.log(`‚úÖ Found ${filteredReceipts.length} receipts for firm ${firmId}`);
    }
    
  } catch (error) {
    console.error("‚ùå Error loading receipts:", error);
    setReceipts([]);
    toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è");
  } finally {
    setLoadingData(prev => ({ ...prev, receipts: false }));
  }
};
  const loadReceiptsBySupplierAndFirm = async (supplierId: number, firmId: number) => {
  setLoadingData(prev => ({ ...prev, receipts: true }));
  
  try {
    console.log(`Loading receipts for supplier ${supplierId} and firm ${firmId}...`);
    const response = await axios.get(`documents/?type=receipt&status=posted`);
    console.log("‚úÖ All receipts loaded:", response.data);
    
    const receiptsData = response.data.data || [];
    
    // ‚úÖ –û–¢–†–ò–ú–£–Ñ–ú–û –ù–ê–ó–í–£ –§–Ü–†–ú–ò –î–õ–Ø –§–Ü–õ–¨–¢–†–ê–¶–Ü–á:
    const selectedFirm = firms.find(f => f.id === firmId);
    const firmName = selectedFirm?.name;
    
    console.log(`Looking for supplier_id: ${supplierId}, firm_name: "${firmName}"`);
    
    // ‚úÖ –§–Ü–õ–¨–¢–†–£–Ñ–ú–û –ü–û –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–£ –Ü –§–Ü–†–ú–Ü:
    const filteredReceipts = receiptsData.filter((receipt: any) => {
      console.log(`Receipt ${receipt.id}: supplier_id=${receipt.supplier_id}, firm_name="${receipt.firm_name}"`);
      return receipt.supplier_id === supplierId && receipt.firm_name === firmName;
    });
    
    console.log(`‚úÖ Filtered receipts:`, filteredReceipts);
    
    setReceipts(filteredReceipts);
    
    if (filteredReceipts.length === 0) {
      toast.error(`–î–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ —Ç–∞ —Ñ—ñ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    } else {
      toast.success(`–ó–Ω–∞–π–¥–µ–Ω–æ ${filteredReceipts.length} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è`);
    }
    
  } catch (error) {
    console.error("‚ùå Error loading receipts:", error);
    setReceipts([]);
    toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è");
  } finally {
    setLoadingData(prev => ({ ...prev, receipts: false }));
  }
};

  const handleFirmChange = (value: string) => {
    const firmId = parseInt(value);
    setForm({ 
      ...form, 
      firm: firmId,
      trade_points: [],
      items: []
    });
    
    if (firmId) {
      loadTradePointsByFirm(firmId);
      if (form.base_type === 'receipt') {
        loadReceiptsByFirm(firmId);
      }
    } else {
      setTradePoints([]);
      setReceipts([]);
    }
  };

  const handleBaseTypeChange = (value: string) => {
    setForm({ 
      ...form, 
      base_type: value,
      base_receipt: undefined,
      base_group: undefined,
      base_price_type: undefined,
      items: []
    });

    if (value === 'receipt' && form.firm) {
      loadReceiptsByFirm(form.firm);
    }
  };

  const handleBaseReceiptChange = async (value: string) => {
  const receiptId = parseInt(value);
  setForm({ ...form, base_receipt: receiptId, items: [] });
  
  console.log("Receipt selected:", receiptId);
  console.log("Trade points selected:", form.trade_points);
  console.log("Price types available:", priceTypes.length);
  
  if (receiptId && form.trade_points.length > 0 && priceTypes.length > 0) {
    await loadReceiptProducts(receiptId);
  } else {
    console.log("Skipping product load - missing requirements:");
    console.log("- Receipt ID:", receiptId);
    console.log("- Trade points:", form.trade_points.length);
    console.log("- Price types:", priceTypes.length);
  }
};

  // ‚úÖ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–û–í–ê–†–Ü–í –ó –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø
const loadReceiptProducts = async (receiptId: number) => {
  try {
    console.log(`Loading products from receipt ${receiptId}...`);
    const response = await axios.get(`receipt-products/?document_id=${receiptId}`);
    console.log("‚úÖ Receipt products response:", response.data);
    
    // ‚úÖ –ü–ï–†–ï–í–Ü–† –©–û –ü–û–í–ï–†–¢–ê–Ñ API:
    let productsData = [];
    if (Array.isArray(response.data)) {
      productsData = response.data;
    } else if (response.data.data && Array.isArray(response.data.data)) {
      productsData = response.data.data;
    } else {
      console.warn("Unexpected products response:", response.data);
      toast.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API");
      return;
    }
    
    console.log("‚úÖ Products from receipt:", productsData);
    
    if (productsData.length === 0) {
      toast.error("–í —Ü—å–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤");
      return;
    }

    if (form.trade_points.length === 0) {
      toast.error("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏");
      return;
    }

    if (priceTypes.length === 0) {
      toast.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∏–ø—ñ–≤ —Ü—ñ–Ω");
      return;
    }

    const newItems: PriceSettingItem[] = [];
    const defaultPriceType = priceTypes.find(pt => pt.is_default) || priceTypes[0];
    const defaultUnit = units.find(u => u.name === '—à—Ç—É–∫–∞') || units[0] || { id: 1 };

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó
    productsData.forEach((receiptItem: any) => {
  const product = allProducts.find(p => p.id === receiptItem.product);
  const basePrice = receiptItem.price * 1.2;
  
  // ‚úÖ –í–ò–ö–û–†–ò–°–¢–û–í–£–í–ê–¢–ò –§–Ü–†–ú–£ –ó –§–û–†–ú–ò (–ù–ï –ó API):
  const selectedFirm = getSelectedFirm();
  
  newItems.push({
    product: receiptItem.product,
    product_name: product?.name || `–¢–æ–≤–∞—Ä ID: ${receiptItem.product}`,
    price_type: defaultPriceType.id,
    price: basePrice,
    vat_percent: selectedFirm?.is_vat ? (receiptItem.vat_percent || 20) : 0,
    vat_included: selectedFirm?.is_vat || false,
    markup_percent: 20,
    product_base_unit: product?.unit,
    product_base_unit_name: product?.unit_name || units.find(u => u.id === product?.unit)?.name || "‚Äî", 
    base_price: basePrice,
    unit_conversion: null,  
    trade_point: form.trade_points[0],
    // ‚úÖ –§–Ü–†–ú–ê –ó –§–û–†–ú–ò:
    firm: form.firm,
    firm_name: selectedFirm?.name,
    firm_is_vat_payer: selectedFirm?.is_vat || false
  });
});

    console.log("‚úÖ Created items:", newItems);

    for (const item of newItems) {
  if (item.product) {
    const conversions = await loadProductConversions(item.product);
    setProductConversions(prev => ({
      ...prev,
      [item.product!]: conversions
    }));
  }
}
    
    setForm(prev => ({ 
      ...prev, 
      items: newItems
    }));

    toast.success(`–î–æ–¥–∞–Ω–æ ${newItems.length} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è`);
    
  } catch (error) {
    console.error("‚ùå Error loading receipt products:", error);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è");
  }
};

// ‚úÖ –í–ò–ù–ï–°–¢–ò –¶–Æ –§–£–ù–ö–¶–Ü–Æ –°–Æ–î–ò (–ü–Ü–°–õ–Ø loadReceiptProducts):
const loadProductsByGroup = async (groupId: number) => {
  try {
    console.log(`Loading products from group ${groupId}...`);
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–æ –≥—Ä—É–ø—ñ –∑ —É–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö
    const groupProducts = allProducts.filter(product => product.group_id === groupId);
    console.log("‚úÖ Products from group:", groupProducts);
    
    if (groupProducts.length === 0) {
      toast.error("–í —Ü—ñ–π –≥—Ä—É–ø—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤");
      return;
    }

    if (form.trade_points.length === 0) {
      toast.error("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏");
      return;
    }

    if (priceTypes.length === 0) {
      toast.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∏–ø—ñ–≤ —Ü—ñ–Ω");
      return;
    }

    const newItems: PriceSettingItem[] = [];
    const defaultPriceType = priceTypes.find(pt => pt.is_default) || priceTypes[0];
    const defaultUnit = units.find(u => u.name === '—à—Ç—É–∫–∞') || units[0] || { id: 1 };

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑ –≥—Ä—É–ø–∏
    groupProducts.forEach((product) => {
      newItems.push({
  product: product.id,
  product_name: product.name,
  price_type: defaultPriceType.id,
  price: product.price || 0,
  vat_percent: getSelectedFirm()?.is_vat ? 20 : 0, // ‚úÖ
  vat_included: getSelectedFirm()?.is_vat || false, // ‚úÖ
  markup_percent: 0,
  product_base_unit: product.unit,
  product_base_unit_name: product.unit_name,
  base_price: product.price || 0,
  unit_conversion: null,
  trade_point: form.trade_points[0],
  // ‚úÖ –î–û–î–ê–¢–ò –Ü–ù–§–û –ü–†–û –§–Ü–†–ú–£:
  firm: form.firm,
  firm_name: getSelectedFirm()?.name,
  firm_is_vat_payer: getSelectedFirm()?.is_vat || false
});
    });

    console.log("‚úÖ Created items from group:", newItems);
    
    setForm(prev => ({ 
      ...prev, 
      items: newItems
    }));

    toast.success(`–î–æ–¥–∞–Ω–æ ${newItems.length} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –≥—Ä—É–ø–∏`);
    
  } catch (error) {
    console.error("‚ùå Error loading products from group:", error);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –≥—Ä—É–ø–∏");
  }
};

  const handleTradePointsChange = (tradePointId: number, selected: boolean) => {
    const newTradePoints = selected 
      ? [...form.trade_points, tradePointId]
      : form.trade_points.filter(id => id !== tradePointId);
    
    setForm({ 
      ...form, 
      trade_points: newTradePoints
    });
      console.log('Trade points updated:', newTradePoints);
  console.log('Form state:', form);
  };

const addNewProduct = () => {
    console.log("üî• addNewProduct called"); // ‚úÖ –î–û–î–ê–ô–¢–ï –¶–ï–ô –õ–û–ì
  console.log('üî• Current form.trade_points:', form.trade_points);
    console.log('üî• Current form.trade_points:', form.trade_points); // ‚úÖ –î–û–î–ê–¢–ò

  if (form.trade_points.length === 0) {
        console.log('‚ùå No trade points selected!');

        console.log('‚ùå No trade points selected!'); // ‚úÖ –î–û–î–ê–¢–ò

    toast.error("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏");
    return;
  }

  if (priceTypes.length === 0) {
    toast.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∏–ø—ñ–≤ —Ü—ñ–Ω");
    return;
  }

  const defaultUnit = units.find(u => u.name === '—à—Ç—É–∫–∞') || units[0] || { id: 1, name: '—à—Ç' };
  const defaultPriceType = priceTypes.find(pt => pt.is_default) || priceTypes[0];

  const newItem: PriceSettingItem = {
    product: undefined,
    product_name: "",
    product_base_unit: undefined,       // ‚úÖ –î–û–î–ê–¢–ò
    product_base_unit_name: "",         // ‚úÖ –î–û–î–ê–¢–ò
    price_type: defaultPriceType.id,
    base_price: 0,                      // ‚úÖ –î–û–î–ê–¢–ò
    price: 0,
    unit_conversion: null,              // ‚úÖ –î–û–î–ê–¢–ò
    unit_conversion_name: "",           // ‚úÖ –î–û–î–ê–¢–ò
    final_unit: undefined,              // ‚úÖ –î–û–î–ê–¢–ò
    final_unit_name: "",                // ‚úÖ –î–û–î–ê–¢–ò
    vat_percent: isSelectedFirmVatPayer() ? 20 : 0,  // ‚úÖ –í–ò–ü–†–ê–í–ò–¢–ò
    vat_included: isSelectedFirmVatPayer(),          // ‚úÖ –í–ò–ü–†–ê–í–ò–¢–ò
    markup_percent: 0,
    trade_point: form.trade_points[0],
    // ‚úÖ –î–û–î–ê–¢–ò –Ü–ù–§–û –ü–†–û –§–Ü–†–ú–£:
    firm: form.firm,
    firm_name: getSelectedFirm()?.name,
    firm_is_vat_payer: isSelectedFirmVatPayer()
  };

  setForm({
    ...form,
    items: [...form.items, newItem]
  });
};

  // ‚úÖ –í–ò–î–ê–õ–ï–ù–ù–Ø –¢–û–í–ê–†–£
  const removeItem = (index: number) => {
    const items = [...form.items];
    items.splice(index, 1);
    setForm({ ...form, items });
  };



const [productConversions, setProductConversions] = useState<{[key: number]: ProductUnitConversion[]}>({});

// ‚úÖ –§–£–ù–ö–¶–Ü–Ø –û–¢–†–ò–ú–ê–ù–ù–Ø –§–ê–°–£–í–ê–ù–¨ –î–õ–Ø –¢–û–í–ê–†–£:
const updateItem = (itemIndex: number, field: keyof PriceSettingItem, value: any) => {
  const updatedItems = [...form.items];
  updatedItems[itemIndex] = {
    ...updatedItems[itemIndex],
    [field]: value
  };
  
  console.log(`üî• Updating item ${itemIndex}, field: ${field}, value:`, value);
   
  setForm({ ...form, items: updatedItems });
};

  // ‚úÖ –í–ò–ë–Ü–† –¢–û–í–ê–†–£
const handleProductSelect = async (selectedItem: SelectedProductWithUnit) => {
  if (currentItemIndex >= 0) {
    const conversions = await loadProductConversions(selectedItem.product.id);
    setProductConversions(prev => ({
      ...prev,
      [selectedItem.product.id]: conversions
    }));
    
    // ‚úÖ –ü–†–û–°–¢–û –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –î–ê–ù–Ü –ë–ï–ó –†–û–ó–†–ê–•–£–ù–ö–Ü–í:
    const updatedItems = [...form.items];
    updatedItems[currentItemIndex] = {
      ...updatedItems[currentItemIndex],
      product: selectedItem.product.id,
      product_name: selectedItem.product.name,
      product_base_unit: selectedItem.product.unit,
      product_base_unit_name: selectedItem.product.unit_name,
      
      // ‚úÖ –ë–ï–ó –†–û–ó–†–ê–•–£–ù–ö–Ü–í - –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ:
      base_price: 0,  // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–µ–¥–µ
      price: 0,       // = base_price (–ø–æ–∫–∞–∑—É—î–º–æ —Ç–µ —Å–∞–º–µ)
      unit_conversion: selectedItem.unit_conversion_id,
      unit_conversion_name: selectedItem.unit_conversion_id ? selectedItem.unit_name : "",
      final_unit_name: selectedItem.unit_name,
    };
    
    setForm({ ...form, items: updatedItems });
  }
  
  setShowProductModal(false);
  setCurrentItemIndex(-1);
};

  // ‚úÖ –í–ò–ë–Ü–† –ö–Ü–õ–¨–ö–û–• –¢–û–í–ê–†–Ü–í
// ‚úÖ –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –í–ò–ë–û–†–£
const handleMultipleProductsSelect = async (selectedItems: SelectedProductWithUnit[]) => {
  if (form.trade_points.length === 0 || priceTypes.length === 0) {
    toast.error("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏");
    return;
  }

  const defaultPriceType = priceTypes.find(pt => pt.is_default) || priceTypes[0];
  const defaultTradePoint = form.trade_points[0];
  const selectedFirm = getSelectedFirm();

  const newItems: PriceSettingItem[] = [];

  // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–æ–≤–∞—Ä –∑ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è–º
  for (const selectedItem of selectedItems) {
    const conversions = await loadProductConversions(selectedItem.product.id);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É
    setProductConversions(prev => ({
      ...prev,
      [selectedItem.product.id]: conversions
    }));

    const basePrice = selectedItem.product.base_price || selectedItem.product.price || 0;
    let finalPrice = basePrice;
    
    // –Ø–∫—â–æ —î —Ñ–∞—Å—É–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É
    if (selectedItem.unit_conversion_id && selectedItem.factor !== 1) {
      finalPrice = basePrice / selectedItem.factor;
    }

    newItems.push({
      product: selectedItem.product.id,
      product_name: selectedItem.product.name,
      product_base_unit: selectedItem.product.unit,
      product_base_unit_name: selectedItem.product.unit_name,
      price_type: defaultPriceType.id,
      
      // ‚úÖ –ë–ê–ó–û–í–ê –¢–ê –§–Ü–ù–ê–õ–¨–ù–ê –¶–Ü–ù–ê:
      base_price: basePrice,
      price: finalPrice,
      
      // ‚úÖ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –§–ê–°–£–í–ê–ù–ù–Ø:
      unit_conversion: selectedItem.unit_conversion_id,
      unit_conversion_name: selectedItem.unit_conversion_id ? selectedItem.unit_name : "",
      final_unit: selectedItem.product.unit,
      final_unit_name: selectedItem.unit_name,
      
      vat_percent: selectedFirm?.is_vat ? 20 : 0,
      vat_included: selectedFirm?.is_vat || false,
      markup_percent: 0,
      trade_point: defaultTradePoint,
      firm: form.firm,
      firm_name: selectedFirm?.name,
      firm_is_vat_payer: selectedFirm?.is_vat || false
    });
  }

  setForm({ 
    ...form, 
    items: [...form.items, ...newItems]
  });
  
  setShowProductModal(false);
  setCurrentItemIndex(-1);
  
  toast.success(`–î–æ–¥–∞–Ω–æ ${selectedItems.length} —Ç–æ–≤–∞—Ä—ñ–≤`);
};

const openProductModal = (itemIndex: number) => {
  console.log("üî• Opening product modal for index:", itemIndex); // ‚úÖ –î–û–î–ê–ô–¢–ï –¶–ï–ô –õ–û–ì
  setCurrentItemIndex(itemIndex);
  setShowProductModal(true);
};

  const openMultiProductModal = () => {
    setCurrentItemIndex(-1);
    setShowProductModal(true);
  };

  const validateForm = (): boolean => {
    if (!form.company || !form.firm) {
      toast.error("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é —Ç–∞ —Ñ—ñ—Ä–º—É ‚ùó");
      return false;
    }

    if (!form.valid_from) {
      toast.error("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –¥—ñ—ó —Ü—ñ–Ω ‚ùó");
      return false;
    }

    if (form.trade_points.length === 0) {
      toast.error("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É —Ç–æ—á–∫—É ‚ùó");
      return false;
    }

    if (form.items.length === 0) {
      toast.error("–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä ‚ùó");
      return false;
    }

    const hasInvalidItems = form.items.some(item => !item.product);
    if (hasInvalidItems) {
      toast.error("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π ‚ùó");
      return false;
    }

    return true;
  };

  // ‚úÖ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–û–ö–£–ú–ï–ù–¢–ê
const handleSave = async () => {
  if (!validateForm()) {
    return;
  }

  setSaving(true);


  
  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–ù–û –î–û –¢–í–û–ì–û BACKEND
const requestBody = {
    company: form.company,
    firm: form.firm,
    valid_from: form.valid_from,
    base_type: form.base_type || undefined,
    base_receipt: form.base_receipt,
    base_group: form.base_group,
    base_price_type: form.base_price_type,
    trade_points: form.trade_points,
    items: form.items.map(item => ({
      product: item.product,
      price_type: item.price_type,
      base_price: Number(item.base_price || 0),
      price: Number(item.base_price || 0),
      vat_percent: Number(item.vat_percent || 0),
      vat_included: Boolean(item.vat_included),
      markup_percent: Number(item.markup_percent || 0),
      unit_conversion: item.unit_conversion,
      trade_point: item.trade_point,
      firm: item.firm || form.firm,
      unit: item.product_base_unit  // ‚úÖ –î–û–î–ê–¢–ò –¶–ï –ü–û–õ–ï!
    })),
    comment: form.comment || ""
  };

  console.log("=== –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô REQUEST –ó UNIT ===");
  console.log("Request body:", JSON.stringify(requestBody, null, 2));
  console.log("Sample item:", requestBody.items[0]);
  console.log("==================================");

  try {
    const response = await axios.post("create-price-setting-document/", requestBody);
    console.log("‚úÖ Success:", response.data);
    toast.success("–î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ");
    
    setTimeout(() => {
      navigate("/price-settings");
    }, 500);
    
  } catch (error: any) {
    console.error("Error:", error.response?.data);
    toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è");
  } finally {
    setSaving(false);
  }
};

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <PageMeta title="–ù–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è | –ù–∞—à–°–æ—Ñ—Ç" description="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤" />
      <PageBreadcrumb
        crumbs={[
          { label: "–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è", href: "/price-settings" },
          { label: "–ù–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç" },
        ]}
      />

      <div className="mb-6 flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-semibold text-gray-800 dark:text-white">
            üí∞ –ù–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
          </h1>
          <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
            –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä–∏
          </p>
        </div>
        <div className="flex gap-3">
          <Button variant="outline" size="sm" onClick={() => navigate("/price-settings")}>
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </Button>
          <Button variant="primary" size="sm" onClick={() => setShowSaveModal(true)} disabled={saving}>
            {saving ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç"}
          </Button>
        </div>
      </div>

      <div className="grid gap-6">
  {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
  <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
    <h2 className="mb-4 text-lg font-semibold text-gray-800 dark:text-white">
      –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    </h2>
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –ö–æ–º–ø–∞–Ω—ñ—è *
        </label>
        <Select
  options={companies.map(company => ({
    value: company.id.toString(),
    label: company.name
  }))}
  placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é"
  onChange={handleCompanyChange} // ‚úÖ –ó–ú–Ü–ù–ò–¢–ò –ù–ê handleCompanyChange
  defaultValue="" // ‚úÖ –ó–ú–Ü–ù–ò–¢–ò –ù–ê ""
/>
      </div>

      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –§—ñ—Ä–º–∞ *
        </label>
        <Select
  options={getFilteredFirms().map(firm => ({ // ‚úÖ –í–ò–ö–û–†–ò–°–¢–ê–¢–ò getFilteredFirms()
    value: firm.id.toString(),
    label: `${firm.name} (${firm.is_vat ? '–∑ –ü–î–í' : '–±–µ–∑ –ü–î–í'})` // ‚úÖ –ü–û–ö–ê–ó–ê–¢–ò –ü–î–í
  }))}
  placeholder="–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ—Ä–º—É"
  onChange={handleFirmChange}
  defaultValue="" // ‚úÖ –ó–ú–Ü–ù–ò–¢–ò –ù–ê ""
/>
      </div>

      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –¥—ñ—ó *
        </label>
        <Input
          type="date"
          value={form.valid_from}
          onChange={(e) => setForm({ ...form, valid_from: e.target.value })}
        />
      </div>
    </div>
  </div>

  {/* ‚úÖ 1. –°–ü–û–ß–ê–¢–ö–£ –¢–û–†–ì–û–í–Ü –¢–û–ß–ö–ò */}
  <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
    <div className="mb-4 flex items-center justify-between">
      <div>
        <h2 className="text-lg font-semibold text-gray-800 dark:text-white">
          –ö—Ä–æ–∫ 1: –¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ * 
        </h2>
        <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
          –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏, –¥–ª—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –¥—ñ—è—Ç–∏ —Ü—ñ —Ü—ñ–Ω–∏
        </p>
      </div>
      {form.trade_points.length > 0 && (
        <div className="text-sm text-gray-600 dark:text-gray-400">
          –û–±—Ä–∞–Ω–æ: {form.trade_points.length} –∑ {tradePoints.length}
        </div>
      )}
    </div>
    
    {/* –í–µ—Å—å –∫–æ–¥ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫ —Ç—É—Ç... */}
    {loadingData.tradePoints ? (
      <div className="p-6 border border-blue-300 bg-blue-50 rounded-lg text-blue-700 flex items-center gap-2">
        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫...
      </div>
    ) : tradePoints.length === 0 ? (
      <div className="p-6 border border-yellow-300 bg-yellow-50 rounded-lg text-yellow-800">
        <div className="flex items-center gap-3 mb-2">
          <span className="text-xl">üè™</span>
          <span className="font-medium">–¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ –¥–ª—è —Ü—ñ—î—ó —Ñ—ñ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</span>
        </div>
        <p className="text-sm">
          –£ –æ–±—Ä–∞–Ω–æ—ó —Ñ—ñ—Ä–º–∏ –Ω–µ–º–∞—î –ø—Ä–∏–≤'—è–∑–∞–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫. 
          –î–æ–¥–∞–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ñ—ñ—Ä–º—É.
        </p>
      </div>
    ) : (
      <>
        <div className="mb-4 flex items-center gap-3">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setForm({ ...form, trade_points: tradePoints.map(tp => tp.id) })}
            disabled={form.trade_points.length === tradePoints.length}
          >
            ‚úÖ –û–±—Ä–∞—Ç–∏ –≤—Å—ñ
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setForm({ ...form, trade_points: [], items: [] })}
            disabled={form.trade_points.length === 0}
          >
            ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ
          </Button>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫ */}
        <div className="grid gap-3 md:grid-cols-1 lg:grid-cols-2">
          {tradePoints.map(tradePoint => (
            <div 
              key={tradePoint.id} 
              className={`flex items-center gap-3 p-4 border rounded-lg transition-colors cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800/50 ${
                form.trade_points.includes(tradePoint.id)
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                  : 'border-gray-200 dark:border-gray-700'
              }`}
              onClick={() => handleTradePointsChange(tradePoint.id, !form.trade_points.includes(tradePoint.id))}
            >
              <input
                type="checkbox"
                id={`trade-point-${tradePoint.id}`}
                checked={form.trade_points.includes(tradePoint.id)}
                onChange={(e) => handleTradePointsChange(tradePoint.id, e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                onClick={(e) => e.stopPropagation()}
              />
              <label htmlFor={`trade-point-${tradePoint.id}`} className="flex-1 cursor-pointer">
                <div className="font-medium text-gray-900 dark:text-white">
                  üè™ {tradePoint.name}
                </div>
                <div className="text-xs text-gray-400 mt-1">
                  ID: {tradePoint.id}
                </div>
              </label>
              {form.trade_points.includes(tradePoint.id) && (
                <div className="text-blue-600 dark:text-blue-400">
                  ‚úÖ
                </div>
              )}
            </div>
          ))}
        </div>

        {form.trade_points.length > 0 && (
          <div className="mt-4 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
            <div className="flex items-center gap-2 text-green-800 dark:text-green-400">
              <span className="text-lg">‚úÖ</span>
              <span className="text-sm font-medium">
                –¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ –æ–±—Ä–∞–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –±–∞–∑—É–≤–∞–Ω–Ω—è.
              </span>
            </div>
          </div>
        )}
      </>
    )}
  </div>

  {/* ‚úÖ 2. –¢–ï–ü–ï–† –ë–ê–ó–£–í–ê–ù–ù–Ø (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏) */}
  {form.trade_points.length > 0 && (
    <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
      <h2 className="mb-4 text-lg font-semibold text-gray-800 dark:text-white">
        –ö—Ä–æ–∫ 2: –¢–∏–ø –±–∞–∑—É–≤–∞–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
      </h2>
      
      <div className="grid gap-4 md:grid-cols-2">
        <Select
          options={[
            { value: '', label: '–†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' },
            { value: 'receipt', label: 'üì¶ –ù–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è' },
            { value: 'product_group', label: 'üìÅ –ü–æ –≥—Ä—É–ø—ñ —Ç–æ–≤–∞—Ä—ñ–≤' },
            { value: 'price_type', label: 'üí∞ –ü–æ —Ç–∏–ø—É —Ü—ñ–Ω–∏' }
          ]}
          placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –±–∞–∑—É–≤–∞–Ω–Ω—è"
          onChange={handleBaseTypeChange}
          defaultValue={form.base_type}
        />

        {form.base_type === 'receipt' && (
  <div className="col-span-2 space-y-4"> {/* ‚úÖ –î–û–î–ê–¢–ò space-y-4 */}
    {/* ‚úÖ –î–û–î–ê–¢–ò –í–ò–ë–Ü–† –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–ê: */}
    <div>
      <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
        –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ *
      </label>
      <div className="max-w-md">
        <Select
          options={suppliers.map(supplier => ({
            value: supplier.id.toString(),
            label: supplier.name
          }))}
          placeholder="–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"
          onChange={(value) => {
            const supplierId = parseInt(value);
            setSelectedSupplier(supplierId);
            setReceipts([]); // –°–∫–∏–¥–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏
            setForm({ ...form, base_receipt: undefined, items: [] });
            
            // ‚úÖ –ó–ê–í–ê–ù–¢–ê–ñ–£–Ñ–ú–û –î–û–ö–£–ú–ï–ù–¢–ò –î–õ–Ø –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–ê
            if (supplierId && form.firm) {
              loadReceiptsBySupplierAndFirm(supplierId, form.firm);
            }
          }}
          defaultValue=""
        />
      </div>
    </div>

    {/* ‚úÖ –î–û–ö–£–ú–ï–ù–¢–ò –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –í–ò–ë–†–ê–ù–û –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–ê: */}
    {selectedSupplier && (
      <div>
        <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
          –î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è *
        </label>
        {loadingData.receipts ? (
          <div className="p-3 border border-blue-300 bg-blue-50 rounded-lg text-blue-700 flex items-center gap-2">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
            –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...
          </div>
        ) : (!receipts || receipts.length === 0) ? (
          <div className="p-3 border border-yellow-300 bg-yellow-50 rounded-lg text-yellow-700">
            ‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
          </div>
        ) : (
          <div className="max-w-md">
            <Select
              options={receipts.map(receipt => ({
                value: receipt.id.toString(),
                label: `${receipt.doc_number} –≤—ñ–¥ ${new Date(receipt.date).toLocaleDateString('uk-UA')}`
              }))}
              placeholder="–û–±–µ—Ä—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è"
              onChange={handleBaseReceiptChange}
              defaultValue=""
            />
          </div>
        )}
      </div>
    )}
  </div>
)}

{form.base_type === 'product_group' && (
  <div className="col-span-2">
    <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
      –ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤ *
    </label>
    <div className="max-w-md">
      <Select
        options={productGroups.map(group => ({
          value: group.id.toString(),
          label: group.name
        }))}
        placeholder="–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É —Ç–æ–≤–∞—Ä—ñ–≤"
        onChange={async (value) => {
          const groupId = parseInt(value);
          setForm({ ...form, base_group: groupId, items: [] });
          
          // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ó–ê–í–ê–ù–¢–ê–ñ–£–Ñ–ú–û –¢–û–í–ê–†–ò
          if (groupId && form.trade_points.length > 0 && priceTypes.length > 0) {
            await loadProductsByGroup(groupId);
          } else {
            console.log("Skipping product load - missing requirements:");
            console.log("- Group ID:", groupId);
            console.log("- Trade points:", form.trade_points.length);
            console.log("- Price types:", priceTypes.length);
          }
        }}
        defaultValue=""
      />
    </div>
    {form.base_group && (
      <div className="mt-2 text-sm text-blue-600 dark:text-blue-400">
        ‚ÑπÔ∏è –¢–æ–≤–∞—Ä–∏ –∑ —Ü—ñ—î—ó –≥—Ä—É–ø–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω—ñ –¥–æ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
      </div>
    )}
  </div>
)}

{form.base_type === 'price_type' && (
  <div className="col-span-2"> {/* ‚úÖ –î–æ–¥–∞–π —Ü–µ */}
    <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-white">
      –¢–∏–ø —Ü—ñ–Ω–∏ *
    </label>
    <div className="max-w-md"> {/* ‚úÖ –ó–∞–ª–∏—à —Ü–µ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è */}
      <Select
        options={priceTypes.map(type => ({
          value: type.id.toString(),
          label: type.name
        }))}
        placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ü—ñ–Ω–∏"
        onChange={(value) => setForm({ ...form, base_price_type: parseInt(value) })}
        defaultValue=""
      />
    </div>
  </div>
)}

        {/* –Ü–Ω—à—ñ —Ç–∏–ø–∏ –±–∞–∑—É–≤–∞–Ω–Ω—è... */}
      </div>
    </div>
  )}

        {/* –¢–æ–≤–∞—Ä–∏ —ñ —Ü—ñ–Ω–∏ */}
        <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
          <div className="mb-4 flex items-center justify-between">
            <h2 className="text-lg font-semibold text-gray-800 dark:text-white">
              –¢–æ–≤–∞—Ä–∏ —Ç–∞ —Ü—ñ–Ω–∏ ({form.items.length})
            </h2>
            <div className="flex gap-2 flex-wrap">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={openMultiProductModal}
                disabled={form.trade_points.length === 0}
              >
                –î–æ–¥–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={addNewProduct}
                disabled={form.trade_points.length === 0}
              >
                ‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä
              </Button>
              {form.items.length > 0 && (
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => setForm({ ...form, items: [] })}
                  className="text-red-600 hover:text-red-700"
                >
                  üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ
                </Button>
              )}
            </div>
          </div>

          {form.trade_points.length === 0 ? (
            <div className="p-6 border border-yellow-300 bg-yellow-50 rounded-lg text-yellow-700">
              ‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä–∏
            </div>
          ) : form.items.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              <div className="mb-4">
                <span className="text-4xl">üì¶</span>
              </div>
              <h3 className="text-lg font-medium mb-2">–¢–æ–≤–∞—Ä–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ</h3>
              <p className="text-sm mb-4">
                {form.base_type === 'receipt' && form.base_receipt 
                  ? "–¢–æ–≤–∞—Ä–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
                  : "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏"
                }
              </p>
            </div>
          ) : (
            <div className="overflow-hidden rounded-lg border border-gray-200 dark:border-white/10">
              <Table>
                <TableHeader>
  <tr className="border-b border-gray-200 dark:border-white/10 bg-gray-50 dark:bg-white/5">
    <TableCell isHeader className="px-4 py-3 text-left text-sm font-semibold text-gray-600 dark:text-white">
      –¢–æ–≤–∞—Ä *
    </TableCell>
    <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
      –ë–∞–∑–æ–≤–∞ –æ–¥.
    </TableCell>
    <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
      –§–∞—Å—É–≤–∞–Ω–Ω—è
    </TableCell>
    <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
      –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞
    </TableCell>
    <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
      –§—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
    </TableCell>
    <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
      –¢–∏–ø —Ü—ñ–Ω–∏
    </TableCell>
    <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
      –¢–æ—Ä–≥–æ–≤–∞ —Ç–æ—á–∫–∞
    </TableCell>
    {shouldShowVatColumns && (
      <>
        <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
          –ü–î–í %
        </TableCell>
        <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
          –ó –ü–î–í
        </TableCell>
      </>
    )}
    <TableCell isHeader className="px-4 py-3 text-center text-sm font-semibold text-gray-600 dark:text-white">
      –î—ñ—ó
    </TableCell>
  </tr>
</TableHeader>

<TableBody>
  {form.items.map((item, index) => {
    const conversions = getProductConversions(item.product || 0);
    
    return (
      <tr key={index} className="border-b border-gray-100 dark:border-white/10">
        {/* ‚úÖ –¢–û–í–ê–† */}
        <td className="px-4 py-3">
          <div className="flex items-center gap-2">
            <div className="flex-1">
              {item.product_name ? (
                <div className="p-2 bg-gray-50 dark:bg-gray-700 rounded border">
                  <div className="font-medium text-sm">{item.product_name}</div>
                  <div className="text-xs text-gray-500 mt-1">
                    ID: {item.product}
                  </div>
                </div>
              ) : (
                <div className="p-2 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded text-center text-gray-500">
                  –¢–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–Ω–æ
                </div>
              )}
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => openProductModal(index)}
            >
              {item.product_name ? "–ó–º—ñ–Ω–∏—Ç–∏" : "–û–±—Ä–∞—Ç–∏"}
            </Button>
          </div>
        </td>
        
        {/* ‚úÖ –ë–ê–ó–û–í–ê –û–î–ò–ù–ò–¶–Ø */}
        <td className="px-4 py-3">
          <div className="text-center">
            <span className="text-sm font-medium">
              {item.product_base_unit_name || "‚Äî"}
            </span>
          </div>
        </td>
        
        {/* ‚úÖ –§–ê–°–£–í–ê–ù–ù–Ø */}
        <td className="px-4 py-3">
          <div className="flex justify-center">
            <div className="w-40">
              {item.product ? (
                <Select
                  options={[
                    { value: '', label: '–ë–µ–∑ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è' },
                    ...conversions.map(conv => ({
                      value: conv.id.toString(),
                      label: conv.name
                    }))
                  ]}
                  placeholder="–û–±–µ—Ä—ñ—Ç—å —Ñ–∞—Å—É–≤–∞–Ω–Ω—è"
                  onChange={(value) => updateItem(index, 'unit_conversion', value ? parseInt(value) : null)}
                  defaultValue={item.unit_conversion?.toString() || ''}
                  key={`conversion-${item.product}-${conversions.length}-${item.unit_conversion}`}
                />
              ) : (
                <div className="text-center text-gray-400 text-sm">
                  –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä
                </div>
              )}
            </div>
          </div>
        </td>
        
        {/* ‚úÖ –ë–ê–ó–û–í–ê –¶–Ü–ù–ê - –ü–û–õ–ï –î–õ–Ø –í–í–ï–î–ï–ù–ù–Ø */}
        <td className="px-4 py-3">
          <div className="flex justify-center">
            <Input
              type="number"
              value={item.base_price?.toString() || ''}
              onChange={(e) => updateItem(index, 'base_price', parseFloat(e.target.value) || 0)}
              className="w-28 text-center"
              placeholder="–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É"
            />
          </div>
        </td>
        
        {/* ‚úÖ –§–Ü–ù–ê–õ–¨–ù–ê –¶–Ü–ù–ê - –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –†–û–ó–†–ê–•–û–í–£–Ñ–¢–¨–°–Ø */}
        <td className="px-4 py-3">
  <div className="text-center">
    <div className="text-lg font-bold text-green-600">
      {(item.base_price || 0).toFixed(2)} ‚Ç¥
    </div>
    <div className="text-xs text-gray-500">
      –∑–∞ {item.final_unit_name || item.product_base_unit_name || "–æ–¥."}
    </div>
  </div>
</td>
        
        {/* ‚úÖ –¢–ò–ü –¶–Ü–ù–ò */}
        <td className="px-4 py-3">
          <div className="flex justify-center">
            <div className="w-32">
              <Select
                options={priceTypes.map(pt => ({
                  value: pt.id.toString(),
                  label: pt.name
                }))}
                placeholder="–¢–∏–ø —Ü—ñ–Ω–∏"
                onChange={(value) => updateItem(index, 'price_type', parseInt(value))}
                defaultValue={item.price_type?.toString() || ''}
              />
            </div>
          </div>
        </td>
        
        {/* ‚úÖ –¢–û–†–ì–û–í–ê –¢–û–ß–ö–ê */}
        <td className="px-4 py-3">
          <div className="flex justify-center">
            <div className="w-36">
              <Select
                options={tradePoints.map(tp => ({
                  value: tp.id.toString(),
                  label: tp.name
                }))}
                placeholder="–¢–æ—Ä–≥–æ–≤–∞ —Ç–æ—á–∫–∞"
                onChange={(value) => updateItem(index, 'trade_point', parseInt(value))}
                defaultValue={item.trade_point?.toString() || ''}
              />
            </div>
          </div>
        </td>
        
        {/* ‚úÖ –ö–û–õ–û–ù–ö–ò –ü–î–í (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ) */}
        {shouldShowVatColumns && (
          <>
            <td className="px-4 py-3">
              <div className="flex justify-center">
                {item.firm_is_vat_payer ? (
                  <Input
                    type="number"
                    value={item.vat_percent?.toString() || '0'}
                    onChange={(e) => updateItem(index, 'vat_percent', parseFloat(e.target.value) || 0)}
                    className="w-20 text-center"
                    placeholder="20"
                  />
                ) : (
                  <span className="text-gray-400">‚Äî</span>
                )}
              </div>
            </td>
            
            <td className="px-4 py-3">
              <div className="flex justify-center">
                {item.firm_is_vat_payer ? (
                  <input
                    type="checkbox"
                    checked={item.vat_included || false}
                    onChange={(e) => updateItem(index, 'vat_included', e.target.checked)}
                    className="rounded border-gray-300"
                  />
                ) : (
                  <span className="text-gray-400">‚Äî</span>
                )}
              </div>
            </td>
          </>
        )}
        
        {/* ‚úÖ –î–Ü–á */}
        <td className="px-4 py-3">
          <div className="flex justify-center">
            <Button
              variant="outline"
              size="sm"
              onClick={() => removeItem(index)}
              className="text-red-600 hover:text-red-700"
            >
              üóëÔ∏è
            </Button>
          </div>
        </td>
      </tr>
    );
  })}
</TableBody>
              </Table>
            </div>  
          )}

          {/* –ü—ñ–¥—Å—É–º–∫–∏ */}
          {form.items.length > 0 && (
            <div className="mt-6 flex justify-end">
              <div className="w-80 space-y-2 rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-white/10 dark:bg-white/5">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">–¢–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫:</span>
                  <span className="font-medium">{form.trade_points.length}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">–ü–æ–∑–∏—Ü—ñ–π —Ü—ñ–Ω:</span>
                  <span className="font-medium">{form.items.length}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 dark:text-gray-400">–¢–∏–ø—ñ–≤ —Ü—ñ–Ω:</span>
                  <span className="font-medium">{priceTypes.length}</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –ö–æ–º–µ–Ω—Ç–∞—Ä */}
        <div className="rounded-xl border border-gray-200 bg-white p-6 shadow-sm dark:border-white/10 dark:bg-white/[0.02]">
          <h2 className="mb-4 text-lg font-semibold text-gray-800 dark:text-white">
            –ö–æ–º–µ–Ω—Ç–∞—Ä (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
          </h2>
          <textarea
            value={form.comment || ''}
            onChange={(e) => setForm({ ...form, comment: e.target.value })}
            placeholder="–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è..."
            className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            rows={3}
          />
        </div>
      </div>
         {/* –ú–æ–¥–∞–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É */}
     <ProductSelectionModal
       isOpen={showProductModal}
       onClose={() => {
         setShowProductModal(false);
         setCurrentItemIndex(-1);
       }}
       onProductSelect={handleProductSelect}
       onMultipleProductsSelect={handleMultipleProductsSelect}
       multiSelect={currentItemIndex === -1}
       selectedWarehouse={undefined}
     />

     {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è */}
     <ConfirmModal
       isOpen={showSaveModal}
       title="–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è?"
       description={`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:

- –¢–æ–≤–∞—Ä—ñ–≤: ${form.items.length}
- –¢–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫: ${form.trade_points.length}
- –ö–æ–º–ø–∞–Ω—ñ—è: ${companies.find(c => c.id === form.company)?.name || '–ù–µ –æ–±—Ä–∞–Ω–æ'}
- –§—ñ—Ä–º–∞: ${firms.find(f => f.id === form.firm)?.name || '–ù–µ –æ–±—Ä–∞–Ω–æ'}
- –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –¥—ñ—ó: ${form.valid_from}`}
       onConfirm={() => {
         setShowSaveModal(false);
         handleSave();
       }}
       onClose={() => setShowSaveModal(false)}
     />
   </>
 );
}